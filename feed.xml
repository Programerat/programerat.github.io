<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Programerat</title>
    <description>Hajde te mesojm sot dicka.</description>
    <link>https://programerat.github.io</link>
    <language>en-us</language>
    
      <item>
        <title>Prezantimi i programimit</title>
        
        
          <description>&lt;h3 id=&quot;hyrje&quot;&gt;Hyrje&lt;/h3&gt;
&lt;p&gt;Para se të flas për programim, së pari do të flas përse ekziston programimi.&lt;/p&gt;

&lt;p&gt;Mbajeni në mend se programimi është i popullarizuar për një arsye, ai bën një punë siç i keni thënë, nuk ka nevojë për pauzë, dhe e kryen më shpejtë se një përson.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 13 Jul 2022 10:15:20 +0200</pubDate>
        <guid isPermaLink="true">https://programerat.github.io/2022/07/njohja-me-programimin</guid>
      <link>https://programerat.github.io/2022/07/njohja-me-programimin</link>
      <content:encoded>
        <![CDATA[
        <!doctype html>
        <html lang="en" prefix="op: http://media.facebook.com/op#">
          <head>
            <meta charset="utf-8">
            <link rel="canonical" href="https://programerat.github.io/2022/07/njohja-me-programimin">
            <meta property="op:markup_version" content="v1.0">
          </head>
          <body>
            <article>
              <h3 id="hyrje">Hyrje</h3>
<p>Para se të flas për programim, së pari do të flas përse ekziston programimi.</p>

<p>Mbajeni në mend se programimi është i popullarizuar për një arsye, ai bën një punë siç i keni thënë, nuk ka nevojë për pauzë, dhe e kryen më shpejtë se një përson.</p>

<p>Të gjithë po përpiqen të zëvendësojnë punën manuale të njeriut me automatizim ose programimin te proceseve të ndryshme, kështu që nëse jam pronar i një kompanie të madhe, atëherë mund të bëj analiza dhe të zbuloj se cilat procese mund të automatizohet për ta bërë prodhimin më produktiv.</p>

<p>p.sh. Nëse një mjekut i kushton shumë për të thirrur klientët në telefon për të konfirmuar ardhjen, atëherë ndërtoni një platformë ku ata mund të rezervojnë dhe konfirmojnë ardhjen.</p>

<p>Pra, programimi ekziston për të ndihmuar një biznes apo ndërmarrje të bëjë diçka me saktesi the shpejtsi.</p>

<h3 id="çka-është-programimi">Çka është programimi?</h3>

<p>Programimi përbëhet thjesht nga një ose më shumë algoritme ose komanda, të cilat komunikojnë me njëri-tjetrin për të kryer një detyrë, të cilën programuesi e programon.
Ka disa gjuhë që kompjuteri i kupton dhe ju mund të zgjidhni njërën prej tyre për të programuar një program të thjeshtë.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Programi i pare"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Ky është një program i thjeshtë i shkruan në gjuhën <strong>c</strong> që shfaq në ekran “Programi i parë”.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="k">echo</span> <span class="s2">"Programi i pare"</span><span class="p">;</span>

</code></pre></div></div>
<p>Ky është një program i thjeshtë i shkruar në PHP që shfaqë në shfletues “Programi i parë”.</p>

<h3 id="çka-më-duhet-për-të-filluar">Çka më duhet për të filluar?</h3>
<p>Vetëm për të provuar pa instaluar asgjë, mund ta provoni edhe nga telefoni në <a href="https://www.programiz.com/c-programming/online-compiler/">online në faqen e internetit</a> dhe atje mund të shkruani diçka në thonjëza rreth ata ndryshuan tekstin.</p>

<p>Dhe klikoni RUN në butonin kaltër për të parë rezultatin. <br />
Këta hapa i tregojnë këtij programi se çfarë të bëjë, në këtë rast programi i parë do të printojë tekstin.</p>

<p>Për shkak se tani ka shumë platforma online ku mund të ekzekutoni kodin, nuk keni nevojë të shkarkoni asgjë, përveçse të zgjidhni një nga platformat online që ju lejon të provoni falas.</p>

<p>Disa platforma:</p>
<ol>
  <li><a href="https://www.ideone.com/">https://www.ideone.com/</a></li>
  <li><a href="https://replit.com/">https://replit.com/</a></li>
  <li><a href="https://www.onlinegdb.com/">https://www.onlinegdb.com/</a></li>
  <li><a href="https://www.jdoodle.com/">https://www.jdoodle.com/</a></li>
  <li><a href="https://www.programiz.com/c-programming/online-compiler/">https://www.programiz.com/c-programming/online-compiler/</a></li>
</ol>

<p>Mund ta gjeni edhe në videot e kaluara se si mund ta përgadisni kompjuterin tuaj, për ta egzekutuar PHP kodin duke përdorur Docker.</p>

<h3 id="si-punon-një-kompjuter">Si punon një kompjuter?</h3>

<p>Kompjuteri përbëhet prej pjesëve harduerike, ku ato pjesë komunikojnë në mes vete për ta kryer një punë.
Gjuhën që kompjuteri e përdor për të komunikur me pjesët harduerike është përmes numrave binarë.</p>

<p>Sistemi i numrave binar përbëhet nga zero 0 dhe njësitë 1, për kompjuterin ka energji elektrike është 1 dhe nuk ka 0.
Në këtë mënyrë kompjuteri mund të komunikoj përmes elektricitetit në gjuhën binare.</p>

<p>Pra, çdo program që shkruhet, gjithashtu përkthehet në numër binar nga një përpilues dhe më pas kompjuteri e kupton atë gjuhë.</p>

<p><img src="/assets/images/binar_0.png" alt="binar" />
Imazhi më lartë e reprezenton numrin zero.</p>

<p><img src="/assets/images/binar_6.png" alt="binar" />
Imazhi më lartë e reprezenton numrin gjashtë.</p>

<h3 id="shembull-se-si-programimi-funksionon">Shembull se si programimi funksionon.</h3>
<p>Në vijim do të shihni një vizualizim se si funksionon programimi. <br />
Mendoni për personazhin si kompjuterin tuaj, kështu që ai nuk e ka idenë se çfarë pune do të bëjë dhe jeni ju ai që do ta urdhëroni të kryejë detyra të thjeshta.</p>

<blockquote>
  <p>Video permbajtja</p>
</blockquote>

<p>Mund ta provoni kete ne <a href="https://apps.apple.com/de/app/id1496833156">ipad ose mac permes ketij linku</a> ose permes <a href="https://scratch.mit.edu/projects/editor/?tutorial=getStarted">online platformes se MIT</a></p>

<h3 id="cilat-janë-karrierat-që-mund-ti-ndjeki">Cilat janë karrierat që mund ti ndjeki?</h3>
<p>Për t’u bërë programues mund të zgjidhni karriera të ndryshme në programim.</p>

<ol>
  <li>Zhvillues i Ueb
    <ul>
      <li>Front end &lt;- mundesi per karriere</li>
      <li>Back end &lt;- Mundesi per karriere</li>
      <li>Full stack &lt;- Mundesi per karrier</li>
      <li>Infrastructure Dev &lt;- Mundesi per karrier</li>
    </ul>
  </li>
  <li>Zhvillues i Telefonave
    <ul>
      <li>Android &lt;- Mundesi per karrier</li>
      <li>iOS (Apple) &lt;- Mundesi per karrier</li>
      <li>Fluttr Dev &lt;- Mundesi per karrier</li>
      <li>React native &lt;- Mundesi per karrier</li>
      <li>Tester &lt;- Mundesi per karrier</li>
    </ul>
  </li>
  <li>Industria Lojrave
    <ul>
      <li>Unity developer &lt;- Mundesi per karrier</li>
      <li>Unreal Engine Developer &lt;- Mundesi per karrier</li>
      <li>Cry Engine Developer &lt;- Mundesi per karrier</li>
      <li>Tester &lt;- Mundesi per karrier</li>
    </ul>
  </li>
  <li>Robotika
    <ul>
      <li>Tester &lt;- Mundesi per karrier</li>
      <li>Automation Developer &lt;- Mundesi per karrier</li>
      <li>RPA Developer &lt;- Mundesi per karrier</li>
    </ul>
  </li>
</ol>

<p>Pastaj pozicioni që mund të merrni pas disa viteve përvojë, secila prej tyre vazhdon në nivele të ndryshme prej fillestar deri në udhëheqës i ekipit ose menaxher.</p>

<h3 id="konkluzioni">Konkluzioni</h3>
<p>Pra, një karrierë si programues mund të jetë shumë e frytshme si intelektualisht ashtu edhe financiarisht. <br />
Kjo ju jep përvojë dhe mundësi për të punuar me njerëz në mbarë botën, e cila është një përvojë unike. <br />
Të mundëson të arrish shumë në jetë edhe pse nuk ke kryer asnjë shkollë.</p>

            </article>
          </body>
        </html>
        ]]>
      </content:encoded>
    </item>
    
      <item>
        <title>Docker-compose me Laravel dhe Symfony - Video</title>
        
        
          <description>&lt;p&gt;Në këtë video do të flas për Laravel dhe Symfony si mund ta kontejnerizojmë një projekt që është i bërë nga njëra nga këto dy framework.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 25 Apr 2022 10:15:20 +0200</pubDate>
        <guid isPermaLink="true">https://programerat.github.io/2022/04/laravel-symfony-me-docker-compose</guid>
      <link>https://programerat.github.io/2022/04/laravel-symfony-me-docker-compose</link>
      <content:encoded>
        <![CDATA[
        <!doctype html>
        <html lang="en" prefix="op: http://media.facebook.com/op#">
          <head>
            <meta charset="utf-8">
            <link rel="canonical" href="https://programerat.github.io/2022/04/laravel-symfony-me-docker-compose">
            <meta property="op:markup_version" content="v1.0">
          </head>
          <body>
            <article>
              <p>Në këtë video do të flas për Laravel dhe Symfony si mund ta kontejnerizojmë një projekt që është i bërë nga njëra nga këto dy framework.</p>

<p>Kjo video është një shtesë e <a href="https://programerat.github.io/2022/04/si-ta-paketoni-nje-php-me-docker-compose">videos së kaluar ku e konfigurojmë xampp me php</a>.</p>

<p>Referencat në video janë:</p>
<ul>
  <li><a href="https://hub.docker.com/_/composer">Docker HUB Composer</a></li>
  <li><a href="https://programerat.github.io/2022/04/si-ta-paketoni-nje-php-me-docker-compose">Artikulli i Docker Compose</a></li>
</ul>


            </article>
          </body>
        </html>
        ]]>
      </content:encoded>
    </item>
    
      <item>
        <title>Përgaditu për live me Docker compose - PHP, NGINX, MySql</title>
        
        
          <description>&lt;p&gt;Në këtë video do të mësoni se çka është docker-compose dhe si mund ta paketojmë një aplikacion që të tjerët mund ta përdorin.&lt;/p&gt;
</description>
        
        <pubDate>Sat, 23 Apr 2022 10:15:20 +0200</pubDate>
        <guid isPermaLink="true">https://programerat.github.io/2022/04/si-ta-paketoni-nje-php-me-docker-compose-copy</guid>
      <link>https://programerat.github.io/2022/04/si-ta-paketoni-nje-php-me-docker-compose-copy</link>
      <content:encoded>
        <![CDATA[
        <!doctype html>
        <html lang="en" prefix="op: http://media.facebook.com/op#">
          <head>
            <meta charset="utf-8">
            <link rel="canonical" href="https://programerat.github.io/2022/04/si-ta-paketoni-nje-php-me-docker-compose-copy">
            <meta property="op:markup_version" content="v1.0">
          </head>
          <body>
            <article>
              <p>Në këtë video do të mësoni se çka është docker-compose dhe si mund ta paketojmë një aplikacion që të tjerët mund ta përdorin.</p>

<p>Nuk keni nevoj të instaloni Xampp, apache ose PHP thjesht duhet të keni Docker të instaluar.</p>

<p>Referencat në video janë:</p>
<ul>
  <li><a href="https://hub.docker.com">Docker HUB</a></li>
  <li><a href="https://programerat.github.io/2022/01/si-te-perdorim-docker-compose">Artikulli i Docker Compose</a></li>
  <li><a href="https://gist.github.com/chronon/95911d21928cff786e306c23e7d1d3f3">Docker php shtesat</a></li>
  <li><a href="https://www.nginx.com/">Nginx website</a></li>
  <li><a href="https://docs.docker.com/get-started/08_using_compose/#:~:text=Docker%20Compose%20is%20a%20tool,or%20tear%20it%20all%20down.">Docker Compose Dokumentimi</a></li>
</ul>

<h4 id="fajllat">Fajllat</h4>

<p>Fajlli per nginx <code class="language-plaintext highlighter-rouge">default.config</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {  

     listen 80 default_server;  
     root /var/www/html;  
     index index.html index.php;  

     charset utf-8;  

     location / {  
      try_files $uri $uri/ /index.php?$query_string;  
     }  

     location = /favicon.ico { access_log off; log_not_found off; }  
     location = /robots.txt { access_log off; log_not_found off; }  

     access_log off;  
     error_log /var/log/nginx/error.log error;  

     sendfile off;  

     client_max_body_size 100m;  

     location ~ .php$ {  
      fastcgi_split_path_info ^(.+.php)(/.+)$;  
      fastcgi_pass php:9000;  
      fastcgi_index index.php;  
      include fastcgi_params;  
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;  
      fastcgi_intercept_errors off;  
      fastcgi_buffer_size 16k;  
      fastcgi_buffers 4 16k;  
    }  

    location ~ /.ht {  
      deny all;  
    }  
} 
</code></pre></div></div>


            </article>
          </body>
        </html>
        ]]>
      </content:encoded>
    </item>
    
      <item>
        <title>Mësoni ta paketoni një PHP website me Docker - Video</title>
        
        
          <description>&lt;p&gt;Në këtë video do të shpjegoj se si ta paketojmë një aplikacion që është i bërë në PHP.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 12 Apr 2022 10:15:20 +0200</pubDate>
        <guid isPermaLink="true">https://programerat.github.io/2022/04/si-ta-p%C3%ABrgaditeni-nj%C3%AB-aplikacon-me-docker-compose</guid>
      <link>https://programerat.github.io/2022/04/si-ta-p%C3%ABrgaditeni-nj%C3%AB-aplikacon-me-docker-compose</link>
      <content:encoded>
        <![CDATA[
        <!doctype html>
        <html lang="en" prefix="op: http://media.facebook.com/op#">
          <head>
            <meta charset="utf-8">
            <link rel="canonical" href="https://programerat.github.io/2022/04/si-ta-p%C3%ABrgaditeni-nj%C3%AB-aplikacon-me-docker-compose">
            <meta property="op:markup_version" content="v1.0">
          </head>
          <body>
            <article>
              <p>Në këtë video do të shpjegoj se si ta paketojmë një aplikacion që është i bërë në PHP.</p>

<p>Nuk keni nevoj të instaloni Xampp, apache ose PHP thjesht duhet të keni Docker të instaluar.</p>

<p>Referencat në video janë:</p>
<ul>
  <li><a href="https://hub.docker.com">Docker HUB</a></li>
  <li><a href="https://programerat.github.io/2022/01/si-te-krijoni-aplikacionin-tuaj-te-pare-me-docker">Artikulli i Docker</a></li>
  <li><a href="https://www.php.net/manual/en/features.commandline.webserver.php">PHP Web Server</a></li>
</ul>


            </article>
          </body>
        </html>
        ]]>
      </content:encoded>
    </item>
    
      <item>
        <title>Si ta përdorim modelin dekorues (eng. Decorator Pattern).</title>
        
        
          <description>&lt;p&gt;Modelet e dizajnimit të kodit janë një mënyrë shumë e mirë për të përmirësuar  menagjimin e kodit dhe për të zvogëluar numrin e gabimeve(eng. bugs).
Njëra nga modelet më të përdorura është modeli Dekorues, i cili mundëson që të shtojmë logjikë në një objekt pa e ndryshuar implementimin origjinal të objektit.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 10 Feb 2022 18:03:20 +0100</pubDate>
        <guid isPermaLink="true">https://programerat.github.io/2022/02/modelet-e-strukturimit-te-kodit-modeli-dekorues</guid>
      <link>https://programerat.github.io/2022/02/modelet-e-strukturimit-te-kodit-modeli-dekorues</link>
      <content:encoded>
        <![CDATA[
        <!doctype html>
        <html lang="en" prefix="op: http://media.facebook.com/op#">
          <head>
            <meta charset="utf-8">
            <link rel="canonical" href="https://programerat.github.io/2022/02/modelet-e-strukturimit-te-kodit-modeli-dekorues">
            <meta property="op:markup_version" content="v1.0">
          </head>
          <body>
            <article>
              <p>Modelet e dizajnimit të kodit janë një mënyrë shumë e mirë për të përmirësuar  menagjimin e kodit dhe për të zvogëluar numrin e gabimeve(eng. bugs).
Njëra nga modelet më të përdorura është modeli Dekorues, i cili mundëson që të shtojmë logjikë në një objekt pa e ndryshuar implementimin origjinal të objektit.</p>

<p>Qëllimi i këtij artikulli është të shpjegojë  se si përdoret ky model dhe si të aplikohet në dizajn. Gjithashtu do të marr disa shembuj se si aplikohet në kod që të kuptohet më lehtë në mënyrë që ti ta aplikosh në projektin tënd.</p>

<h3 id="definicioni">Definicioni</h3>

<p>Modeli dekorues është ashtu edhe si tingëllon, është një model ose klasë që e dekoron një objekt pa pasur  nevojë të bëjmë ndryshime në klasën ekzistuese.</p>

<p>Ky model bën pjesë në kategorinë e modeleve të strukturimit të kodit.</p>

<h3 id="qëllimi">Qëllimi</h3>

<p>Pse duhet të përdorim këtë model dhe çfarë problemi na mundësonë që të zgjedhim?
Disa nga opsionet ku mund ta përdorim këtë model janë:
Nëse klasa ekzistuese ka nevojë të përdoret edhe pse kemi nevojë për ndryshim të logjikës.
Nëse dëshirojmë të shtojmë validim të inputit ose menaxhim të problemeve.
Nëse kodi i vjetër e përdor logjikën që ekziston dhe kemi nevojë  që ta ndryshojmë atë në varësi se si objekti sillet ose jep rezultat.
Shtimi i logjikës së regjistrimit ose raportit (eng. Logging)</p>

<h3 id="uml-diagrami">UML Diagrami</h3>
<p><img src="../../assets/diagrams/decorator_pattern.png" alt="UML diagrami i modelit strategji" /></p>

<p><img src="../../assets/diagrams/decorator_pattern_wikipedia.jpeg" alt="Diagrami i huazuar nga wikipedia" /></p>

<h3 id="shembulli">Shembulli</h3>
<p>Ta zëmë që jemi duke punuar me vetura, andaj kemi vetura elektrike dhe me benzinë.
Më implementimin e më poshtëm e kemi implementuar pjesën për vetura elektrike por pas një kohe kërkohet që veturat elektrike të mund të mbushen edhe me super chargers.</p>

<p>Tash për ne kjo nënkupton që duhet të supportojmë veturat që vetëm janë prodhuar por duhet që të shtojmë funksionalitet se si veturat të reja do të mbushen.</p>

<h3 id="aplikimi-në-kod">Aplikimi në kod</h3>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">interface</span> <span class="nc">ElectricCar</span> <span class="p">{</span>
  <span class="k">function</span> <span class="n">charge</span><span class="p">(</span><span class="kt">int</span> <span class="n">percentage</span><span class="p">):</span> <span class="kt">void</span><span class="p">;</span>
  <span class="k">function</span> <span class="n">start</span><span class="p">():</span> <span class="kt">bool</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">TeslaModelOne</span> <span class="kd">implements</span> <span class="nc">ElectricCar</span> <span class="p">{</span>
  
  <span class="k">private</span> <span class="k">const</span> <span class="no">MIN_BATTERY_PERCENTAGE</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
  <span class="k">private</span> <span class="kt">int</span> <span class="nv">$chargedPercentage</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">public</span> <span class="k">function</span> <span class="n">charge</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$percentage</span><span class="p">):</span> <span class="kt">void</span> <span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">chargedPercentage</span> <span class="o">+=</span> <span class="nv">$percentage</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">function</span> <span class="n">start</span><span class="p">():</span> <span class="kt">bool</span> 
  <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">batteryPercentage</span><span class="p">()</span> <span class="o">&gt;</span> <span class="k">self</span><span class="o">::</span><span class="no">MIN_BATTERY_PERCENTAGE</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Ta zëjmë që vetëm e kemi të implementuar një dizajn si ky më lartë.</span>
<span class="c1">// nëse kemi raste ku veturat elektrike do të jenë të paisura me mundësi mbushje të shpejtë</span>

<span class="kd">class</span> <span class="nc">TeslaModelOneDecorator</span> <span class="kd">implements</span> <span class="nc">ElectricCar</span> <span class="p">{</span>
  
  <span class="k">private</span> <span class="kt">ElectricCar</span> <span class="nv">$car</span><span class="p">;</span>

  <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">ElectricCar</span> <span class="nv">$car</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">car</span> <span class="o">=</span> <span class="nv">$car</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">function</span> <span class="n">superCharge</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$percentage</span><span class="p">):</span> <span class="kt">void</span> <span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">car</span><span class="o">-&gt;</span><span class="nf">charge</span><span class="p">(</span><span class="nv">$percentage</span> <span class="o">+</span> <span class="nv">$percentage</span><span class="p">);</span>
  <span class="p">}</span> 

  <span class="k">public</span> <span class="k">function</span> <span class="n">start</span><span class="p">():</span> <span class="kt">bool</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">car</span><span class="o">-&gt;</span><span class="nf">start</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// E shohim si e kemi shtuar metoden `superCharge` ku e shton funksionalitetin pa e ndryshuar klasën `TeslaModelOne`</span>

<span class="nv">$tesla</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TeslaModelOneDecorator</span><span class="p">(</span><span class="k">new</span> <span class="nc">TeslaModelOne</span><span class="p">())</span>
<span class="nv">$tesla</span><span class="o">-&gt;</span><span class="nf">superCharge</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$tesla</span><span class="o">-&gt;</span><span class="nf">start</span><span class="p">())</span> <span class="p">{</span>
  <span class="k">echo</span> <span class="s2">"It is started!"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Një shembull tjetër mund të jetë nëse dëshirojmë të egzekutojmë një komandë ku është mekanizmi i ri-egzekutimit (eng. Retry Mechanism).</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Ta zëmë që e kemi një komand `CreateOrder`</span>
<span class="kd">class</span> <span class="nc">CreateOrder</span> <span class="kd">implements</span> <span class="nc">Command</span> <span class="p">{</span>
  <span class="k">public</span> <span class="k">function</span> <span class="n">execute</span><span class="p">():</span> <span class="kt">void</span>
  <span class="p">{</span>
    <span class="c1">//egzekuto hapat për të kryer punën</span>
  <span class="p">}</span>
<span class="p">}</span>


<span class="c1">//Implementimi i dekoruesit do ta ket per detyr ta egzekutoj komanden nese kemi ndonje error </span>
<span class="kd">class</span> <span class="nc">CreateOrderWithRetryDecorator</span> <span class="kd">implements</span> <span class="nc">Command</span> <span class="p">{</span>
  
  <span class="k">public</span> <span class="k">function</span> <span class="n">__cosntruct</span><span class="p">(</span><span class="kt">Command</span> <span class="nv">$command</span><span class="p">)</span> <span class="p">{}</span>

  <span class="k">public</span> <span class="k">function</span> <span class="n">execute</span><span class="p">():</span> <span class="kt">void</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">command</span><span class="o">-&gt;</span><span class="nf">execute</span><span class="p">();</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
      <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">command</span><span class="o">-&gt;</span><span class="nf">execute</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="përmbledhja">Përmbledhja</h3>

<p>Modeli dekorues të mundësonë ta shtojmë  logjikën  në objektet ekzistuese, pa pasur nevojë ta ndryshosh objektin ekzistues. Është zgjidhje e lehtë dhe elegante, nuk humb  kohë për të menduar  për zgjidhje të  tjera sepse identifikohet shumë lehtë se ku aplikohet.</p>

<p>Pra herën tjetër kur të shtoshë  logjikë në një klasë, mendo për modelin dekorues edhe shikoje se a mund ta aplikosh.
Një nga këshillat për të pasur kod më të organizuar dhe më të qartësuar është që kodi të mbahet i vogël dhe i ndarë në klasa dhe metoda adekuate. Emërtimi të jetë i thjeshtë dhe me kuptim të plotë.</p>

<p>P.sh. Nëse një klasë jep si rezultat shumën e dy numrave, është më mirë ta quajmë shumëzuesi sesa Kalkulatori sepse kalkulatori përmbanë më shumë se një logjikë, andaj për ta kuptuar se çfarë kryen ajo klasë duhet ta hapim kodin dhe të shohim.</p>

<p><a href="https://www.amazon.de/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?adgrpid=1195169790325301&amp;hvadid=74698212755372&amp;hvbmt=be&amp;hvdev=c&amp;hvlocphy=127338&amp;hvnetw=o&amp;hvqmt=e&amp;hvtargid=kwd-74698309079548%3Aloc-72&amp;hydadcr=3707_1873341&amp;keywords=clean+coding&amp;qid=1643633753&amp;sr=8-1">Ja një libër shum i mirë ku autori dhe disa nga krijuesit e gjuhëve programuese c# kanë shprehur mendim në këtë libër.</a></p>


            </article>
          </body>
        </html>
        ]]>
      </content:encoded>
    </item>
    
      <item>
        <title>Si të përdorni Docker Compose?</title>
        
        
          <description>&lt;p&gt;Në &lt;a href=&quot;https://programerat.github.io/2022/01/si-te-krijoni-aplikacionin-tuaj-te-pare-me-docker&quot;&gt;artikullin e parë&lt;/a&gt; kemi bërë një prezentim të shkurtër për të parë se çfarë është Docker, si mund ta instaloni dhe si mund ta konfiguroni Dockerfile për një aplikacion bazik në PHP. Në këtë artikull do të tregojmë si mund ta përdorim Docker Compose si dhe do të ndërtojmë një aplikacion të thjeshtë në PHP që do të komunikojë me MySQL.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 13 Jan 2022 11:12:00 +0100</pubDate>
        <guid isPermaLink="true">https://programerat.github.io/2022/01/si-te-perdorim-docker-compose</guid>
      <link>https://programerat.github.io/2022/01/si-te-perdorim-docker-compose</link>
      <content:encoded>
        <![CDATA[
        <!doctype html>
        <html lang="en" prefix="op: http://media.facebook.com/op#">
          <head>
            <meta charset="utf-8">
            <link rel="canonical" href="https://programerat.github.io/2022/01/si-te-perdorim-docker-compose">
            <meta property="op:markup_version" content="v1.0">
          </head>
          <body>
            <article>
              <p>Në <a href="https://programerat.github.io/2022/01/si-te-krijoni-aplikacionin-tuaj-te-pare-me-docker">artikullin e parë</a> kemi bërë një prezentim të shkurtër për të parë se çfarë është Docker, si mund ta instaloni dhe si mund ta konfiguroni Dockerfile për një aplikacion bazik në PHP. Në këtë artikull do të tregojmë si mund ta përdorim Docker Compose si dhe do të ndërtojmë një aplikacion të thjeshtë në PHP që do të komunikojë me MySQL.</p>

<h3 id="docker-compose">Docker Compose</h3>
<p>Në artikullin e kaluar mësuam si të krijojmë  një Dockerfile dhe që përmes komandave <code class="language-plaintext highlighter-rouge">docker build</code> dhe <code class="language-plaintext highlighter-rouge">docker run</code> mund të ndërtojmë dhe të ekzekutojmë një kontejner. Mirëpo çfarë nëse duam të ekzekutojm më shumë se një kontejner? Me siguri që do të jetë e shumë lodhshme të ekezkutojm këto komanda më shumë se një herë.</p>

<p>Për këtë ka zgjidhje, dhe ajo është që të përdorni Dcoker Compose, një skedar që përmbanë një bashkësi të instruksioneve për të përformuar një veprim.</p>

<p>Ashtu siq kemi krijuar Dockerfile për të përcaktuar se si duket imazhi juaj, në skedarin<code class="language-plaintext highlighter-rouge">docker-compose.yml</code> mund të përmendni imazhin(et) që dëshironi të përdorni, si dhe parametrat e komandave të ekzekutimit dhe ndërtimit të docker. Për të kuptuar më mirë do të marrim një shembull duke krijuar skedarin tonë të parë <code class="language-plaintext highlighter-rouge">docker-compose.yml.</code></p>

<p>Së pari hapeni terminalin tuaj dhe shikojeni versionin e docker compose në makinën tuaj duke shkruar këtë komand.</p>

<p><code class="language-plaintext highlighter-rouge">docker-compose --version</code></p>

<p><img src="../../assets/images/docker-compose-v.png" alt="dockerComposeVersion" /></p>

<p>Do të krijojmë një skedar bazik të docker compose, për shembullin në artikullin e parë.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">website</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">php-demo</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">./</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./src:/var/www/html</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8000:80</span>
</code></pre></div></div>
<p>Në listën e mëposhtme keni përshkrimin e secilit seksion të <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>:</p>
<ol>
  <li>Në rreshtin e parë duhet të shkruani versionin e docker compose.</li>
  <li><code class="language-plaintext highlighter-rouge">services</code> përmbanë një listë të  të gjitha veglave/serviset që keni për qëllim të ekzekutoni. Unë e kam emëruar <code class="language-plaintext highlighter-rouge">website</code> për arsye se do printojmë një titull në shfletues, por ju mund ta emëroni edhe ndryshe, nuk ka rëndësi. Duhet të mbani mend se këtë emer do ta përdorim për të komunikuar me kontejner të tjerë.</li>
  <li><code class="language-plaintext highlighter-rouge">container_name</code> këtu duhet të vendosni emrin e kontejnerit.</li>
  <li><code class="language-plaintext highlighter-rouge">image</code> duhet të vendosni emrin e imazhit.</li>
  <li>Nën seksioni <code class="language-plaintext highlighter-rouge">build</code> ju shihni se kemi (<code class="language-plaintext highlighter-rouge">context</code>) që do të thotë është duke kërkuar për Dockerfile. Pra duhet të shkruani direktoriumin se ku gjendet Dockerfile i juaj.</li>
</ol>

<p>Skedari i juaj <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> është gati, përpara se të ekzekutoni është mirë të shikojm nëse konfigurimi në skedarin tonë është në rregull duke ekzekutuar në terminal komandën <code class="language-plaintext highlighter-rouge">docker-compose config</code>.</p>

<p><img src="../../assets/images/dc-config.png" alt="dc-config" /></p>

<p>Siq shihet edhe në foton paraprake pra konfigurimet tona kan qenë në rregull. Tani mund të ekzekutojm <code class="language-plaintext highlighter-rouge">docker compose up</code> për të krijuar imazhin(nëse nuk ekziton) dhe për të krijuar kontejneret.</p>

<p><img src="../../assets/images/dc-up.png" alt="dc-up" /></p>

<p>Tani do të instalojmë  MySQL. Kam zgjedhur MySQL v8 ndërsa ju mund të zgjedhni edhe  ndonjë version tjetër. Do të editojmë <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> dhe do të shtojmë konfigurimet për të instaluar MySQL.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">mysql</span><span class="pi">:</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">mysql</span>
        <span class="na">container_name</span><span class="pi">:</span> <span class="s">mysql</span>
        <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
        <span class="na">environment</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">MYSQL_ROOT_PASSWORD=.rootpassword.</span>
          <span class="pi">-</span> <span class="s">MYSQL_DATABASE=php-demo</span>
          <span class="pi">-</span> <span class="s">MYSQL_USER=admin</span>
          <span class="pi">-</span> <span class="s">MYSQL_PASSWORD=.mysqlpassword</span>
        <span class="na">ports</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s2">"</span><span class="s">8082:3306"</span>
  <span class="na">website</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">php-demo</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">./</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
    <span class="na">links</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">mysql:database"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./src:/var/www/html</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8000:80</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">mysql</span>      
</code></pre></div></div>

<p>Në këtë konfigurim ju mund të shihni se kemi shtuar një seksion të ri <code class="language-plaintext highlighter-rouge">envrionment</code> i cili përmbanë disa parametra që lidhen me serverin MySQL. Porti i parazgjedhur <code class="language-plaintext highlighter-rouge">3306</code> është mapuar(eng. mapped) me portin <code class="language-plaintext highlighter-rouge">8082</code>. Seksioni restart: gjithmonë nënkupton kurdo që fillon kontejneri, MyQL do të fillojë po ashtu. Mund të keni vërejtur  se kemi shtuar edhe seksionin <code class="language-plaintext highlighter-rouge">depends_on</code>, kjo nënkupton që për të filluar servisi PHP, duhet sê pari të filloj serveri MySQL.</p>

<p>Duhet të bëjmë disa ndryshime në Dockerfile, ku do të shtojmë konfigurime për instalimin e MySQL.</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> php:latest</span>
<span class="k">RUN </span>apt-get update <span class="se">\
</span>    <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span>
<span class="k">RUN </span>docker-php-ext-install pdo pdo_mysql mysqli
</code></pre></div></div>
<p>Ju duhet të instaloni një paket menagjuse për të ekzekutuar komandat e juaja mbrenda kontejnerit. Psh. <code class="language-plaintext highlighter-rouge">apt-get</code> është një paket menagjuse që ndihmon në trajtimin e paketave në Linux.</p>

<blockquote>
  <p>Për më shumë detaje ju lutem lexoni më shumë për <a href="https://ubuntu.com/server/docs/package-management">Paketat Menagjuse në Ubuntu</a>.</p>
</blockquote>

<p>Kemi instaluar PHP extension si dhe MySQL. Në këtë rast docker ofron docker-php-ext-install për te instaluar shtesat për PHP. Nëse dëshironi mund të instaloni edhe paketen menagjuse të famshme <a href="https://getcomposer.org/doc/">PHP Composer</a>.</p>

<p>Për të implementuar ndryshimet që i kemi bërë në Dockerfile ne duhet të ekzekutojm komandën <code class="language-plaintext highlighter-rouge">docker-compose up --build</code>. Nëse nuk e shtojm <code class="language-plaintext highlighter-rouge">--build</code> nuk do ti mer ndryshimet e reja që i kemi shtuar.</p>

<p>Ndoshta jeni duke pytur veten se si mund të shohim nëse është instaluar paketa menagjuse ose a është duke ekzekutuar/running MySQL?</p>

<h3 id="lidhshmëria-në-mes-kontejnerëve-në-docker">Lidhshmëria në mes kontejnerëve në Docker</h3>
<p>Tash do të shohim si është bërë lidhshmëria në mes kontejnerëve në Docker.</p>

<p>Përmendëm më lart se Docker na lejon me i ekzekutu komadat në kotejnerin që kemi krijuar dhe këtë mund ta bëjm duke ekzekutar komandën <code class="language-plaintext highlighter-rouge">docker exec</code>. Vihet pytja si mund të kyqem në MySQL? Së pari ne duhet të dijm emrin e imazhit për MySQL, dhe këtë informat e marin duke ekzekutuar <code class="language-plaintext highlighter-rouge">docker ps -a</code> në terminal.</p>

<p>Shikoni konfigurimet në <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> që kemi bërë dhe e shihni që emrin e kontejnerit kemi vendos <code class="language-plaintext highlighter-rouge">mysql-server-80</code>. Dhe përgjigjen e pytjës që bëm mund ta marrim duke ekzekutuar këtë kommand në terminal: <code class="language-plaintext highlighter-rouge">docker exec -it mysql bash -l</code></p>

<p><code class="language-plaintext highlighter-rouge">-it</code> do të thot një terminal jo aktive
<code class="language-plaintext highlighter-rouge">bash</code> Unix shell dhe gjuhe komanduse command language</p>

<p><img src="../../assets/images/exec-it.png" alt="dc-exec" /></p>

<p>Tash jemi mrena kontejnerit, na lejohet të shkruajm komanda të Linux pasi kemi instaluar paketen menagjuse <code class="language-plaintext highlighter-rouge">apt-get</code>. Shkruani komandën <code class="language-plaintext highlighter-rouge">ls</code> ose çfarë do komande tjetër për të testuar.</p>

<p>Për tu kyqur në databazë duhet të shkruani këtë komand <code class="language-plaintext highlighter-rouge">mysql -u root -p</code>.</p>

<p><code class="language-plaintext highlighter-rouge">-u</code>është user
<code class="language-plaintext highlighter-rouge">-p</code> është password</p>

<p><img src="../../assets/images/connectdb.png" alt="dc-connectdb" /></p>

<p>Nëse dëshironi të shihni të gjitha databazat, duhet të shkruani në terminalin tuaj <code class="language-plaintext highlighter-rouge">show databases;</code>.</p>

<p><img src="../../assets/images/showdb.png" alt="dc-showdb" /></p>

<p>Pra ktu treguam se a është ekzekutar MySQL brenda Docker. Por si mund të ndërveproj MySQL jasht docker? Si mund të bëje lidhjen MySQL client me MySQL server mbrenda kontejner? Këtë lidhje mund ta bëjm nëse bëjm port forwarding.</p>

<p>Së pari duhet të dijm <code class="language-plaintext highlighter-rouge">id</code> e kontejnerit si dhe <code class="language-plaintext highlighter-rouge">portin</code> dhe këto informata mund të gjejm duke ekzekutuar kommanden <code class="language-plaintext highlighter-rouge">docker ps -a</code>.
Take screenshot. Mund të shihni se si Porti është percjell si dhe në cilin IP.</p>

<p>Në rastin ton kemi <code class="language-plaintext highlighter-rouge">0.0.0.0:8082-&gt;3306/tcp</code>. Pra <code class="language-plaintext highlighter-rouge">0.0.0.0</code> është host dhe porti është <code class="language-plaintext highlighter-rouge">8082</code>.</p>

<p>Një komand tjeter se si mund të shihni portin e një kontejnerit <code class="language-plaintext highlighter-rouge">docker port &lt;containerid&gt;</code>.</p>

<h3 id="ndërveprimi-në-mes-disa-kontejnerve-në-docker">Ndërveprimi në mes disa kontejnerve në Docker</h3>
<p>Pra kuptuam se si docker mund të kominikoj jasht, por çfarë nëse kontejnerët duhet të ndërveproj mes vete?</p>

<p>Një mënyr është të lidhemi nëpermes IP së brendshme. Këtë mund të shihni duke shkruar komandën në terminalin tuaj <code class="language-plaintext highlighter-rouge">docker inspect &lt;container-id&gt;</code>, ky container-id është ID e kontejnerit për MySQL.</p>

<p>Tash do të editojm index.php dhe të shkruajm kodin për të bërë lidhjen me databazë.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">&lt;?php</span>
<span class="nv">$host</span> <span class="o">=</span> <span class="s1">'mysql'</span><span class="p">;</span>

<span class="c1">// Database use name</span>
<span class="nv">$user</span> <span class="o">=</span> <span class="s1">'MYSQL_USER'</span><span class="p">;</span>

<span class="c1">//database user password</span>
<span class="nv">$pass</span> <span class="o">=</span> <span class="s1">'MYSQL_PASSWORD'</span><span class="p">;</span>

<span class="c1">// check the MySQL connection status</span>
<span class="nv">$conn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">mysqli</span><span class="p">(</span><span class="nv">$host</span><span class="p">,</span> <span class="nv">$user</span><span class="p">,</span> <span class="nv">$pass</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$conn</span><span class="o">-&gt;</span><span class="n">connect_error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">die</span><span class="p">(</span><span class="s2">"Connection failed: "</span> <span class="mf">.</span> <span class="nv">$conn</span><span class="o">-&gt;</span><span class="n">connect_error</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="s2">"Connected to MySQL server successfully!"</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>
<p>Pasi që keni përfunduar editimin e <code class="language-plaintext highlighter-rouge">index.php</code> mund te shikoni në shfletues http://localhost:8000 nëse është printuar teksti <code class="language-plaintext highlighter-rouge">Connected to MySQL server successfully!</code>.</p>

<p><code class="language-plaintext highlighter-rouge">curl http://localhost:8000</code></p>

<p>Nëse doni të ndalni <code class="language-plaintext highlighter-rouge">docker-compose</code>, atëher duhet të shkruani këtë komand <code class="language-plaintext highlighter-rouge">docker-compose down</code>.</p>

<h3 id="konkluzioni">Konkluzioni</h3>
<p>Në këtë artikull mësuam se si mund të konfigurojm mjesdise të shumëfishta me ndihmën e docker-compose, si dhe shembullin për docker-compose mund të gjeni ne <a href="https://github.com/Programerat/docker-compose-demo">Github</a>.</p>

<p>Nëse keni ndonjë pyetje ose feedback ju lutem ndjehuni të lirë të postoni më poshtë.</p>

            </article>
          </body>
        </html>
        ]]>
      </content:encoded>
    </item>
    
      <item>
        <title>Si të krijoni aplikacionin tuaj të parë me Docker</title>
        
        
          <description>&lt;p&gt;Së pari do të bëjmë  një prezentim  të shkurtër për të parë se çfarë është Docker dhe pse ta përdorim, pastaj do të marr një shembull për të parë se  si mund  të krijoni aplikacionin tuaj të parë me Docker 🚀🚀.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 11 Jan 2022 11:12:00 +0100</pubDate>
        <guid isPermaLink="true">https://programerat.github.io/2022/01/si-te-krijoni-aplikacionin-tuaj-te-pare-me-docker</guid>
      <link>https://programerat.github.io/2022/01/si-te-krijoni-aplikacionin-tuaj-te-pare-me-docker</link>
      <content:encoded>
        <![CDATA[
        <!doctype html>
        <html lang="en" prefix="op: http://media.facebook.com/op#">
          <head>
            <meta charset="utf-8">
            <link rel="canonical" href="https://programerat.github.io/2022/01/si-te-krijoni-aplikacionin-tuaj-te-pare-me-docker">
            <meta property="op:markup_version" content="v1.0">
          </head>
          <body>
            <article>
              <p>Së pari do të bëjmë  një prezentim  të shkurtër për të parë se çfarë është Docker dhe pse ta përdorim, pastaj do të marr një shembull për të parë se  si mund  të krijoni aplikacionin tuaj të parë me Docker 🚀🚀.</p>

<h3 id="çfarë-është-docker">Çfarë është Docker?</h3>

<p>Docker është një platformë e hapur për zhvillimin, lansimin dhe ekzekutimin e aplikacioneve.  Nuk është e obligueshme  të instaloni server në makinën tuaj lokale si XAMPP ose Apache Tomcat. Me Docker  gjithashtu mund të menaxhoni infrastrukturën tuaj në të njëjtën mënyrë  siç e menaxhoni aplikacionin tuaj.</p>

<p><img src="/assets/images/docker.png" alt="Docker" /></p>

<p>Pra Docker i ofron mundësinë përdoruesit për të paketuar dhe ekzekutuar një aplikacion në një mjedis të pavarur.  <br />
Ky mjedis i izoluar quhet konteiner (eng. Containers).</p>

<p>Konteinerët  janë të lehtë për tu konfiguruar dhe përmbajnë  gjithçka që nevojitet për të ekzekutuar aplikacionin tuaj. Pra në një konteiner  mund të vendosni aplikacionin tuaj, një databazë ose një sistem operativ etj. Po ashtu ju mund të ekzekutoni edhe një apo më shumë konteinerë  në çdo lloj  makine, server apo cloud.</p>

<h3 id="imazhet">Imazhet</h3>

<p>Një imazh Docker përmbanë  gjithçka që nevojitet për të ekzekutuar një aplikacion në një konteiner.
Kjo përfshinë:</p>
<ul>
  <li>kodin</li>
  <li>kohën e ekzekutimit (eng. runtime)</li>
  <li>librarit</li>
  <li>variablat e mjedisit(eng. enviroment variables)</li>
  <li>skedarët e konfigurimit(eng. configuration files)</li>
</ul>

<p>Imazhi më pas mund të vendoset në çdo mjedis Docker dhe të ekzekutohet si një konteiner.</p>

<h3 id="kontejner">Kontejner</h3>
<p>Një kontejner është një shembull i ekzekutushëm i një imazhi . Nga një imazh mund të krijoni kontejnerë të shumtë, po ashtu mund të lidhni një kontejner me një ose më shumë rrjete(eng. networks), të bashkangjitni një ruatje (eng. stroage) në të ose të krijoni një imazh bazuar në fazën aktuale.</p>

<h3 id="pse-duhet-me-përdor-docker-një-zhvillues">Pse duhet me përdor Docker një zhvillues?</h3>

<p>Për t’iu përgjigje më së miri kësaj pyetje, shih listën më poshtë për përfitimet që mund të gjeni:</p>

<ol>
  <li>Docker është i shpejtë. Ndryshe nga një makinë virtuale, aplikacioni juaj mund të fillojë në pak sekonda dhe të ndalojë po aq shpejt.</li>
  <li>Docker është multi-platformë. Ju mund të ekzekutoni konteinerin tuaj në çdo sistem.</li>
  <li>Konteinerët mund të ndërtohen dhe shkatërrohen më shpejt se një makinë virtuale.</li>
  <li>Nuk ka më vështirësi në konfigurimin e mjedisit tuaj të punës. Pasi të konfigurohet Docker i juaj, nuk do t’ju duhet të riinstaloni më manualisht varësitë tuaja.</li>
  <li>Nëse ndryshoni kompjuterin e punës ose nëse një punonjës i bashkohet kompanisë tuaj, ju duhet t’i jepni atyre vetëm konfigurimin tuaj.</li>
  <li>Ju e mbani të pastër hapësirën tuaj të punës, pasi secili prej mjediseve tuaja do të jetë i izoluar dhe ju mund t’i fshini ato në çdo kohë pa ndikuar në pjesën tjetër.</li>
  <li>Do të jetë më e lehtë të lansoni projektin tuaj në serverin tuaj në mënyrë që ta vendosni atë në internet.</li>
</ol>

<h3 id="si-te-instalojm-docker">Si te instalojm Docker?</h3>

<p>Docker është në dispozicion për të gjitha sistemet operative, MacOS, Windows dhe Linux.</p>

<p>Për detaje se si të  instaloni Docker në sistemin operativ mund ti gjeni në këtë link <a href="https://docs.docker.com/get-docker/">https://docs.docker.com/get-docker/</a></p>

<p>Pasi të instalohet Docker me sukses dhe e startoni në kompjuterin tuaj,  hapeni një terminal dhe shkruani këtë komandë për të shikuar se cili version i Docker është instaluar:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker version
</code></pre></div></div>
<p><img src="/assets/images/docker-version.png" alt="DockerVersion" /></p>

<h3 id="shembull-si-të-paketojmë-aplikacionin-tuaj-në-docker">Shembull si të paketojmë aplikacionin tuaj në Docker</h3>

<p>Tani keni njohuri se çfarë është Docker, pra, është koha për të krijuar aplikacionin tuaj të parë!
Qëllimi i ketij tutoriali të shkurtër është të paketojmë një Aplikacion në PHP.</p>

<h4 id="krijo-projektin-e-tuaj">Krijo projektin e tuaj</h4>

<p>Për të krijuar aplikacionin tuaj të parë Docker, ju rekomandoj të krijoni një folder të strukturuar si më poshtë:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span>
├── demo-php
    ── index.php
└── Dockerfile
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">demo-php/index.php</code> (Ky është një skedar(eng. file) PHP i cili printon vetëm një tekst). 
<code class="language-plaintext highlighter-rouge">Dockerfile</code> (Ky skedar do të përmbajë udhëzimet e nevojshme se si të shpërndajmë një aplikacion të thjeshtë në PHP).</p>

<blockquote>
  <p>Dockerfile është një tekst që përmbanë të gjitha komandat për të ndërtuar një imazh.</p>
</blockquote>

<h4 id="edito-indexphp-skedar-dhe-shto-një-tekst">Edito index.php skedar dhe shto një tekst</h4>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> 
        <span class="k">echo</span> <span class="s2">"Docker është magjik!"</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>

<h4 id="edito-dockerfile">Edito Dockerfile</h4>
<p>Gjëja e parë që duhet të bëni kur dëshironi të krijoni skedarin tuaj Dockerfile është të pyesni veten se çfarë doni të bëni. Qëllimi ynë këtu është të lansojmë (eng. deploy) një aplikacion në PHP.</p>

<p>Hapi i parë që duhet të bëni kur krijoni një skedar Dockerfile është të hyni në faqen <a href="https://hub.docker.com/">DockerHub</a>. Kjo faqe përmbanë  shumë imazhe të para-projektuara për të kursyer kohën tuaj (për shembull: të gjitha imazhet për php apache).</p>

<p>Në rastin tonë, ne do të shkruajmë “PHP Apache” në shiritin e kërkimit, dhe do përzgjedhim imazhin me tag <code class="language-plaintext highlighter-rouge">latest</code>.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">FROM php:latest</span> <span class="c1">## Ky imazh është marr nga dockerhub.</span>
<span class="s">COPY index.php /var/www/html/index.php</span> <span class="c1">## Skedari index.php është kopjuar në direktorinë /var/www/html në imazh.</span>
<span class="s">EXPOSE </span><span class="m">80</span> <span class="c1">## Porti 80 është ekspozuar për apache.</span>
<span class="s">CMD ["usr/sbin/apache2ctl", "-D", "FOREGROUND"]</span> <span class="c1">## Apache ka filluar në kontenjer.</span>
</code></pre></div></div>

<h4 id="krijo-imazhin-docker">Krijo imazhin Docker</h4>
<p>Pasi kodi juaj është i shkruar në Dockerfile, gjithçka që duhet të bëni është të krijoni imazhin tuaj që të përmbajë aplikacionin tuaj.</p>

<p>Hapeni një terminal dhe shkruani komadën më poshtë:</p>

<p><code class="language-plaintext highlighter-rouge">docker build -t php-demo:latest . </code></p>

<p>Opsioni <code class="language-plaintext highlighter-rouge">-t</code> ju mundëson të përcaktoni emrin e imazhit tuaj. Në rastin tonë ne kemi zgjedhur <code class="language-plaintext highlighter-rouge">php-demo</code> por ju mund të vendosni çfarë do emri që dëshironi si dhe tag është <code class="language-plaintext highlighter-rouge">latest</code> ose mund te vendosni v1(versioni i parë).</p>

<p><img src="/assets/images/docker-build.png" alt="DockerBuild" /></p>

<h4 id="ekzekutoni-imazhin-në-kontejner">Ekzekutoni imazhin në kontejner</h4>
<p>Për të ekzekutuar imazhin ju mund të përdorni komandën <code class="language-plaintext highlighter-rouge">docker run docker run php-demo:latest</code>. Nëse dëshirojmë që ti qasemi aplikacionit nga shfletuesi, duhet publikuar portin <code class="language-plaintext highlighter-rouge">9090</code> në mënyrë që ti qasemi konteinerit që kemi ndërtuar me port <code class="language-plaintext highlighter-rouge">80</code>. Nëse një kërkesë do të vijë në portin <code class="language-plaintext highlighter-rouge">9090</code>, në këtë rast do ta ridrejtojë atë kërkesë në konteinerin tonë në portin <code class="language-plaintext highlighter-rouge">80</code>.</p>

<p>Nëse një kërkesë do të vijë në portin 9090, në këtë rast do të ridrejtojë atë kërkes në kontejnerin tonë në portin 80.</p>

<p><code class="language-plaintext highlighter-rouge">docker run --name php-app -p 9090:80 php-demo:latest</code></p>

<p><img src="/assets/images/docker-run.png" alt="DockerRun" /></p>

<p>Hapeni shfletuesin shkruani <a href="http://localhost:9090">localhost:9090</a> dhe do të shihni tekstin që keni shkruar më parë ‘Docker është magjik’. Pra index.php është ruajtur brenda koteinerit sepse e kemi ndërtuar imazhin tonë duke përdorur Dockerfile nga lartë.</p>

<p>Këtë projekt mund ta bëni clone nga Github në këtë link <a href="https://github.com/Programerat/first-php-docker-image">PHP DEMO</a>.</p>

<h3 id="komandat-e-nevojshme-për-docker">Komandat e nevojshme për Docker</h3>

<table>
  <thead>
    <tr>
      <th>Komandat</th>
      <th>Përshkrimi</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">docker images ls</code></td>
      <td>Liston imazhet e juaja</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">docker image rm [image name]</code></td>
      <td>Fshini një imazh specifik</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">docker image rm $(docker images -a -q)</code></td>
      <td>Fshin te gjitha imazhet</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">docker ps -a</code></td>
      <td>Liston të gjithë kontejnerët</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">docker stop [container name]</code></td>
      <td>Ndalni një kontejner specifik</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">docker stop $(docker ps -a -q)</code></td>
      <td>Ndalon të gjithë kontejnerët</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">docker rm [container name]</code></td>
      <td>Fshini një kontejner specifik</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">docker rm $(docker ps -a -q)</code></td>
      <td>Fshin të gjithë kontejnerët</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">docker logs [container name]</code></td>
      <td>Shfaq të gjithë logs të një kontejneri specifik</td>
    </tr>
  </tbody>
</table>

<h3 id="konkluzioni">Konkluzioni</h3>
<p>Në këtë artikull, ne kemi diskutuar se si të paketojmë një PHP aplikacion bazik. Nëse keni ndonjë pyetje ose feedback ju lutem ndjehuni të lirë të postoni më poshtë. 👇</p>

            </article>
          </body>
        </html>
        ]]>
      </content:encoded>
    </item>
    
      <item>
        <title>Modelet e strukturimit të kodit, modeli komandë (eng. Command Pattern)</title>
        
        
          <description>&lt;blockquote&gt;
  &lt;p&gt;Njihet edhe si Veprim (eng. Action), Transakcion (eng. Transaction)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        
        <pubDate>Fri, 31 Dec 2021 09:15:20 +0100</pubDate>
        <guid isPermaLink="true">https://programerat.github.io/2021/12/command-pattern-modeli-komande</guid>
      <link>https://programerat.github.io/2021/12/command-pattern-modeli-komande</link>
      <content:encoded>
        <![CDATA[
        <!doctype html>
        <html lang="en" prefix="op: http://media.facebook.com/op#">
          <head>
            <meta charset="utf-8">
            <link rel="canonical" href="https://programerat.github.io/2021/12/command-pattern-modeli-komande">
            <meta property="op:markup_version" content="v1.0">
          </head>
          <body>
            <article>
              <blockquote>
  <p>Njihet edhe si Veprim (eng. Action), Transakcion (eng. Transaction)</p>
</blockquote>

<p>Modeli Komandë përmbanë të gjitha parametrat e nevojshme për veprimin i cili do të bëhet në një komandë. Prandaj, kjo na lejon që komanda të ekzekutohet  në mënyra të ndryshme.</p>

<p>Perparësitë e modelit komandë:</p>
<ol>
  <li>E bën ndarjen e klasës që fillon procesin prej klasës që e kryen punën.</li>
  <li>Lejon që të bëjmë një grup të komandave të njëpasnjëshme duke na e mundësuar një sistem rradhë pritje (eng. Queue System).</li>
  <li>Zgjerimi  është i lehtë, mund të bëhet pa u ndryshuar kodi ekzistues.</li>
  <li>Mund të definohet sistemi për fshirjen e ndryshimeve (eng. Rollback).</li>
</ol>

<h3 id="konteksti-se-ku-do-ta-aplikojmë-modelin">Konteksti se ku do ta aplikojmë modelin</h3>
<p>Ta zëmë  që jemi në një shitore online, dhe dëshirojmë ta bëjmë një blerje. 
Zgjedhim produktin e fusim në kosh dhe klikojmë në butonin Bli. 
Kjo na drejton në një dritare për të mbushur të dhënat bankare dhe të konfirmojmë blerjen.</p>

<h3 id="shembulli-konkret-i-aplikuar-në-kod">Shembulli konkret i aplikuar në kod</h3>
<p>Kodi në një <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" target="_blank">MVC</a> kornizë pune (<em>eng. framework</em>) sikur <a href="https://symfony.com/" target="_blank"> symfony </a> do të dukej si në vijim.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CreateOrderController</span> <span class="p">{</span>
    
    <span class="k">public</span> <span class="k">function</span> <span class="n">execute</span><span class="p">(</span><span class="kt">Request</span> <span class="nv">$request</span><span class="p">)</span> <span class="p">{</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">validate</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span> <span class="c1">//validimi i kërkesës do të bëhet në controller</span>
        <span class="nv">$order</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">createOrder</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">shouldBeApproved</span><span class="p">(</span><span class="nv">$order</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">approve</span><span class="p">(</span><span class="nv">$order</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">orderRepository</span><span class="o">-&gt;</span><span class="nf">create</span><span class="p">(</span><span class="nv">$order</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">integrationBus</span><span class="o">-&gt;</span><span class="nf">send</span><span class="p">(</span><span class="nv">$order</span><span class="p">);</span> <span class="c1">//njofton sistemet tjera që një blerje është bërë </span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>
<p>Nëse punojmë me një kornizë të punës (eng. Framework) MVC dhe nuk përdorim ndonjë organizim të kodit atëherë nuk do të kemi ndarje aty ku bëhet thirrja e serviseve dhe ku kryhet puna, andaj e gjithë logjika do të vendoset në një klasë të vetme. Prandaj edhe shtimi i logjikës të re ose ndryshimeve nuk do të jetë shumë i lehtë.</p>

<p>Ndryshimi se si do të ekzekutohet  logjika në këtë rast, do të ishte shumë e vështirë.<br />
Gjithashtu nëse dëshirojmë ta shtojmë një mekanizëm për kthimin e ekzekutimit që mos të ruajmë të dhënat të përgjysmuara atëherë duhet ti ndryshojmë të gjithë  kontrollerët.</p>

<h3 id="uml-diagrami-i-modelit-komandë">UML Diagrami i modelit Komandë</h3>

<p><img src="/assets/diagrams/TheCommandPattern.png" alt="UML diagrami i modelit komandë" /></p>

<p><img src="/assets/diagrams/Design_Command_Design_Pattern_UML.jpeg" alt="UML diagrami i modelit komandë i huazuar nga wikipedia." /></p>

<p>Klasa që thërret (eng. Invoke) komandat e di  se cilën metodë dhe cilat parametra ti ekzekutojë, por nuk ka dijeni se çka bën ajo metodë.</p>

<p>P.SH: Nëse e dërgon veturën tek miku yt mekanik, ai nuk mund të bëj asgjë nëse nuk i tregon se çfarë dëshiron ti.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$mechanic</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Mechanic</span><span class="p">();</span>
<span class="nv">$mechanic</span><span class="o">-&gt;</span><span class="nf">replaceWheels</span><span class="p">(</span><span class="s1">'type'</span><span class="p">,</span> <span class="s1">'size'</span><span class="p">,</span> <span class="s1">'model'</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="implementimi-i-modelit-komandë">Implementimi i modelit komandë</h3>
<p>Në shembullin e ardshëm do ta shihni që nëse një kërkesë vjen që ta krijojmë një blerje.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">class</span> <span class="nc">CreateOrderCommand</span> <span class="kd">implements</span> <span class="nc">Command</span> <span class="p">{</span>
    
    <span class="k">private</span> <span class="kt">CreateOrderHandler</span> <span class="nv">$receiver</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">Receiver</span> <span class="nv">$receiver</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">receiver</span> <span class="o">=</span> <span class="nv">$receiver</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//komanda e njeh pranuesin por nuk ka dijeni se cka ben ai.</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">execute</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">receiver</span>
            <span class="o">-&gt;</span><span class="nf">checkMoneyLimit</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">totalAmount</span><span class="p">())</span>
            <span class="o">-&gt;</span><span class="nf">identifyCompany</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getComapany</span><span class="p">())</span>
            <span class="o">-&gt;</span><span class="nf">checkRisk</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getCustomer</span><span class="p">())</span>
            <span class="o">-&gt;</span><span class="nf">authorizeOrder</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getOrder</span><span class="p">())</span>
        <span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//në rastin e mekanikut kjo klasë do ta luaj rolin e ndërmjetsuesit në mes teje dhe mekanikut.</span>
<span class="kd">class</span> <span class="nc">CreateOrderInvoker</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kt">array</span> <span class="nv">$commands</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">addCommand</span><span class="p">(</span><span class="kt">Command</span> <span class="nv">$command</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">commands</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$command</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">execute</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">commands</span> <span class="k">as</span> <span class="nv">$command</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$command</span><span class="o">-&gt;</span><span class="nf">execute</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">dispatchIntegrationMessages</span><span class="p">();</span> 
    <span class="p">}</span>

<span class="c1">//kjo i dërgon mesazhet për të njoftuar sistemet tjera që një blerje është bërë.</span>
    <span class="k">private</span> <span class="k">function</span> <span class="n">dispatchIntegrationMessages</span><span class="p">():</span> <span class="kt">void</span> 
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">bus</span><span class="o">-&gt;</span><span class="nf">dispatch</span><span class="p">(</span><span class="k">new</span> <span class="nc">OrderCreated</span><span class="p">(</span><span class="nv">$order</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//kontrolleri do te duket si ne vijim.</span>
<span class="kd">class</span> <span class="nc">CreateOrderController</span> 
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">CreateOrderHandler</span> <span class="nv">$createOrderHandler</span><span class="p">;</span>
    <span class="k">private</span> <span class="kt">CreateOrderInvoker</span> <span class="nv">$invoker</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">CreateOrderHandler</span> <span class="nv">$createOrderHandler</span><span class="p">,</span> <span class="kt">CreateOrderInvoker</span> <span class="nv">$invoker</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">createOrderHandler</span> <span class="o">=</span> <span class="nv">$createOrderHandler</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">invoker</span> <span class="o">=</span> <span class="nv">$invoker</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">execute</span><span class="p">(</span><span class="kt">Request</span> <span class="nv">$request</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$command</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CreateOrderCommand</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">createOrderHandler</span><span class="p">,</span> <span class="nv">$request</span><span class="p">);</span>
        
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">invoker</span>
        <span class="o">-&gt;</span><span class="nf">addCommand</span><span class="p">(</span><span class="nv">$command</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="nf">execute</span><span class="p">();</span>

        <span class="c1">//ose</span>
        <span class="c1">//-&gt;addCommand($createOrderCommand)</span>
        <span class="c1">//-&gt;addCommand($confirmOrderCommand)</span>
        <span class="c1">//-&gt;queue();</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p>Siç shihet në shembull,  komandat mund të shtohen njëra pas tjetrës. , Mënyra se si do të ekzekutohen  ato mund të përmbaj logjikë specifike dhe nëse diçka shkon gabim atëherë mund të vendoset një mekanizëm që i kthen ndryshimet e prezentuara  (eng. Rollback).</p>

<p>Nëse duam  të shtojmë komanda të reja atëherë nuk ka nevojë që ta ndryshojmë kodin ekzistues, gjë që i mbështetë principet solid.</p>

<h3 id="vështiresit-që-ka-ky-model">Vështiresit që ka ky model</h3>
<p>Shumë klasa duhet të inkuadrohen në procese që të kryhet një komandë, andaj edhe duhet të punohet me kujdes të shtuar duke menduar mirë se çfarë klasa shtohen. Sygjeroj që nëse përdorni DDD (eng. Domain Driven Design) atëherë ky model do të jetë më natyral në projektin tuaj.</p>

<p>Sugjerohet  në disa libra që edhe komanda prej kërkesës (eng. Query) të jetë e ndarë. Komanda nuk duhet të kthej rezultat ndërsa kërkesa është që të kthej rezultat. Ky term është propozuar nga autori  <a href="https://www.amazon.com/gp/product/0136291554/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0136291554&amp;linkCode=as2&amp;tag=martinfowlerc-20" target="_blank"> Bertrand Meyer në librin e tij</a>.</p>

<blockquote>
  <p>“Secili mundet me shkru kod që kompjuteri e kupton. Programerat e mirë shkruajnë kod që të tjerët e kutojnë.” – Martin Fowler</p>
</blockquote>


            </article>
          </body>
        </html>
        ]]>
      </content:encoded>
    </item>
    
      <item>
        <title>Paternet e dizajnimit - Paterni Strategji</title>
        
        
          <description>&lt;h3 id=&quot;chain-of-responsibility&quot;&gt;Chain of Responsibility&lt;/h3&gt;
</description>
        
        <pubDate>Mon, 13 Dec 2021 18:35:00 +0100</pubDate>
        <guid isPermaLink="true">https://programerat.github.io/2021/12/dp-chain-of-responsibility</guid>
      <link>https://programerat.github.io/2021/12/dp-chain-of-responsibility</link>
      <content:encoded>
        <![CDATA[
        <!doctype html>
        <html lang="en" prefix="op: http://media.facebook.com/op#">
          <head>
            <meta charset="utf-8">
            <link rel="canonical" href="https://programerat.github.io/2021/12/dp-chain-of-responsibility">
            <meta property="op:markup_version" content="v1.0">
          </head>
          <body>
            <article>
              <h3 id="chain-of-responsibility">Chain of Responsibility</h3>

<p>Gjithashtu njihet si: CoR, Chain of Command</p>

<p>PErshkrimi 
Shembulli</p>

<p>Principet qe supporton</p>

<p>Nje tip rreth programmming</p>

<h3 id="shembull-konkret-nga-jeta-reale">Shembull konkret nga jeta reale</h3>

<h3 id="një-veçori-e-re">Një veçori e re</h3>

<h3 id="një-shembull-se-si-nuk-duhet-të-zbatohet">Një shembull se si nuk duhet të zbatohet.</h3>

<h3 id="uml-modeli-i-strategjise">UML Modeli i strategjise</h3>

<h3 id="implementimi-korrent-i-dizajnit">Implementimi korrent i dizajnit</h3>

<h3 id="mbyllja">Mbyllja</h3>

            </article>
          </body>
        </html>
        ]]>
      </content:encoded>
    </item>
    
      <item>
        <title>Paternet e dizajnimit - Paterni Strategji</title>
        
        
          <description>&lt;p&gt;Paterni strategji mundësonë që ti izolojmë algoritmet në klasa të ndryshme, dhe mundëson zëvendesimin e algoritmeve pa pasur nevojë qe kodi të ndryshohet. Pra paterni strategji na mundësonë që të shtojmë klasa të tjera që implementojnë algoritme të ndryshme por janë të tipit të njëjtë.&lt;br /&gt;
 &lt;/p&gt;
</description>
        
        <pubDate>Mon, 13 Dec 2021 18:35:00 +0100</pubDate>
        <guid isPermaLink="true">https://programerat.github.io/2021/12/modelet-e-dizajnimit-strategjia</guid>
      <link>https://programerat.github.io/2021/12/modelet-e-dizajnimit-strategjia</link>
      <content:encoded>
        <![CDATA[
        <!doctype html>
        <html lang="en" prefix="op: http://media.facebook.com/op#">
          <head>
            <meta charset="utf-8">
            <link rel="canonical" href="https://programerat.github.io/2021/12/modelet-e-dizajnimit-strategjia">
            <meta property="op:markup_version" content="v1.0">
          </head>
          <body>
            <article>
              <p>Paterni strategji mundësonë që ti izolojmë algoritmet në klasa të ndryshme, dhe mundëson zëvendesimin e algoritmeve pa pasur nevojë qe kodi të ndryshohet. Pra paterni strategji na mundësonë që të shtojmë klasa të tjera që implementojnë algoritme të ndryshme por janë të tipit të njëjtë.<br />
 </p>

<p>Gjithashtu kjo e mbështetë  principin e parë <a href="https://programerat.github.io/2021/SOLID-principet-dhe-si-ti-aplikoni-ne-kod/#Principi%20i%20dytë%20-%20E%20hapur%20për%20zgjatje,%20e%20mbyllur%20për%20ndryshime."> Hapur për zgjerim e mbyllur për ndryshime.</a> E mbështetë  edhe principin e pestë në SOLID ku gjithçka varet në kontratë dhe jo në zbatim. 
Prandaj ky patern na mundësonë që të kemi shumë zbatime të bazuara  në një kontratë.<br />
 </p>

<blockquote>
  <p>Mos harroni <a href="https://en.wikipedia.org/wiki/KISS_principle">KISS</a> para çdo gjëje tjetër.</p>
</blockquote>

<h3 id="shembull-konkret-nga-jeta-reale">Shembull konkret nga jeta reale</h3>
<p>Nëse për shembull duam të udhëtojmë nga qyteti  A në qytetin B, ne duhet ta dimë se si të arrijmë më shpejtë në destinacion. Supozojmë që ne e  kemi ndërtuar një aplikacion i cili e llogaritë rrugën më të shpejtë me makinë.</p>

<p>Implementimi në kod do të duket si më poshtë:
<script src="https://gist.github.com/Diarselimi/bfd539de510e269233dee8cdf5987403.js"></script></p>

<h3 id="një-veçori-e-re">Një veçori e re</h3>
<p>Tani na kërkohet të shtojmë një mënyrë të re transporti. Si do të shtonim një mënyrë të re transporti pa shkelur rregullat SOLID?</p>

<h3 id="një-shembull-se-si-nuk-duhet-të-zbatohet">Një shembull se si nuk duhet të zbatohet.</h3>
<p>Në shembullin e mëposhtëm shohim se si rregulli i parë i principeve SOLID është thyer, <a href="https://programerat.github.io/2021/SOLID-principet-dhe-si-ti-aplikoni-ne-kod/#Principi%20i%20par%C3%AB%20-%20Nj%C3%AB%20klas%C3%AB,%20nj%C3%AB%20p%C3%ABrgjegj%C3%ABsi">Principi i një përgjegjësie</a>. <a href="https://programerat.github.io/2021/SOLID-principet-dhe-si-ti-aplikoni-ne-kod/#Principi%20i%20dyt%C3%AB%20-%20E%20hapur%20p%C3%ABr%20zgjatje,%20e%20mbyllur%20p%C3%ABr%20ndryshime.">Gjithashtu thyen principin e dytë e mbyllur për ndryshime</a>, nëse metoda e njërit prej transporteve ndryshon atëhere edhe  kjo klasë duhet të ndryshojë.
<script src="https://gist.github.com/Diarselimi/ab34e500d821307baf0bf48827f92039.js"></script>
Kjo klasë,  në jetën reale do të ishte klasa më e madhe në projekt  nëse do të punonim në një aplikacion si në shembullin më lartë.</p>

<h3 id="uml-modeli-i-strategjise">UML Modeli i strategjise</h3>
<p><img src="/assets/diagrams/transporti.png" alt="uml diagrami" />
Në diagram e shohim se e kemi një kontratë <code class="language-plaintext highlighter-rouge">Transport</code>, pastaj, çdo klasë me zbatime të ndryshme në bazë të kontratës. Klientit nuk i intereson sesi zbatohet algoritmi sepse ai varet në kontratë dhe kjo e mbështetë principin e pestë <a href="https://programerat.github.io/2021/SOLID-principet-dhe-si-ti-aplikoni-ne-kod/#Principi%20i%20pest%C3%AB%20-%20Inversioni%20i%20var%C3%ABsis%C3%AB"> Inversionin i varësisë</a>.</p>

<h3 id="implementimi-korrent-i-dizajnit">Implementimi korrent i dizajnit</h3>
<script src="https://gist.github.com/Diarselimi/d5eafb20f04cea71f0fe7b28b81d8b67.js"></script>

<p>Pjesa me <code class="language-plaintext highlighter-rouge">switch</code> mund të bartet në një factory ku në bazë të inputit e krijon klasën specifike. 
P.SH
<script src="https://gist.github.com/Diarselimi/a3191d3e3b6ff9bf3ba3e31331bf15e5.js"></script>
Këtë pjesë mund ta shpjegoj kur të shkruaj për paternin Factory më në detaje.</p>

<h3 id="mbyllja">Mbyllja</h3>
<p>Gjithmonë kur shkruajmë kod duhet të përpiqemi të lidhim problemin me jetën e përditshme, nëse nuk është e mundur me biznesin.
Zbatimi i principeve dhe modeleve bëhet më i lehtë kur e kuptoni problemin. Për të parë nëse e kuptoni problemin atëherë  provoni t’ia shpjegoni dikujt ose përdorni metodën <a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging">Rubber Duck.</a>
 </p>

<blockquote>
  <p>Siç thotë shprehja, nëse mund t’ia shpjegoni dikujt me fjalë të thjeshta, atëherë e kuptoni problemin.</p>
</blockquote>

<p> 
 </p>

<p>Rubber duck është një metodë shumë e popullarizuar që programuesit e përdorin sepse shpesh nuk kemi pyetje pasi që mendojmë se gjithçka është e qartë, ndërsa nëse përpiqemi ta shpjegojmë atë atëherë e shohim që nuk e kemi kuptuar në të vërtetë.<br />
Në vazhdim do të postoj për modele të tjera por edhe për metoda të ndryshme që përdorin programuesit.<br />
 </p>

<p>Kodim të këndshëm. <code class="language-plaintext highlighter-rouge">&lt;3 &lt;/&gt;</code></p>


            </article>
          </body>
        </html>
        ]]>
      </content:encoded>
    </item>
    
    
  </channel>
</rss>