{
    "version": "https://jsonfeed.org/version/1",
    "title": "Programerat",
    "home_page_url": "https://programerat.github.io/",
    "feed_url": "https://programerat.github.io/feed.json",
    "description": "Hajde te mesojm sot dicka.",
    "icon": "https://programerat.github.io/apple-touch-icon.png",
    "favicon": "https://programerat.github.io/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "programerat",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://programerat.github.io/2022/01/si-te-perdorim-docker-compose",
            "title": "Si të përdorni Docker Compose?",
            "summary": null,
            "content_text": "Në artikullin e parë, kemi bërë një prezantim të shkurtër qfarë është Docker, si mund të instaloni si dhe si mund të konfiguroni Docker për një aplikacion bazik në PHP.Në këtë artikull do të tregojm si mund të përdorim Docker Compose si dhe do të ndërtojmë një aplikacion të thjesht në PHP që do të komunikojë me MySQL.Docker ComposeNë arikullin e kaluar mësuam si të krijojm një Dockerfile dhe që përmes komandave docker build dhe docker run mund të ndërtojmë dhe të ekzekutojm një kontejnerë. Mirpo nëse duhet të ekzekutoni më shumë se një kontejnerë? Atëherë të ekzekutojmë këto komanda do të jetë e lodhshme.Për këtë ju mund të kosideroni të përdorni Compose, një skedarë që përmbanë një bashkësi të instruksioneve, komandave për të përformuar një operim/veprim/funksionim.Ashtu siq kemi krijuar Dockerfile për të definuar se si mund të duket një imazh, ne po ashtu mund të krijojm një docker-compose.yml skedarë ku mund të kemi imazhet që duam të përdorim, si dhe parametrat e komandave të docker ekzekutimit dhe të ndërtimit. Për të kuptuar më mirë do të marim një shembull duke krijuar skedarin tonë të parë docker-compose.yml.Së parim hapeni terminalin tuaj dhe shikoni versionin e docker compose në makinën tuaj duke shkruar këtë komand.docker-compose --versionDo të krijojmë një skedar bazik të docker compose, për shembullin në artikullin e parë.version: '3'services:  website:    container_name: php-demo    build:      context: ./    volumes:      - /src/index.php:/var/www/html/ #check volumes    ports:      - 8000:80  Në reshtin parë version duhet të shkruani versionin e docker compose.  services përmbanë një list të gjitha veglave/serviset që keni për qëllim të ekzekutoni. Unë e kam emruar website për arsyje se kemi me printu një titull në shfletues, por ju mund të emroni edhe ndryshe, nuk ka rëndsi. Duhet të mbani mend se këtë emer do ta përdorim për të komunikuar me kontejner të tjerë.  container_name këtu duhet të emroni emrin e kontejnerit. 4. image duhet të vendosni emrin e imazhit.  Nër seksioni build ju shihni se kemi context që do të thot është duke shikuar për Dockerfile. Pra duhet të shkruani direktoriumin se ku gjendet Dockerfile i juaji.Skedari i juaj docker-compose.yml është gati dhe treguam për secilin seksion qka duhet të shkruajm. Përpara se të ekzekutoni është mirë të shikojm nëse konfigurimi në skedarin tonë është në rregull duke ekzekutuar në terminal komandën docker-compose config.Take screenshot.Siq shihet edhe në foton paraprake pra konfigurimet tona kan qenë në rregull. Tani mund të ekzekutojm docker-compose up për të krijuar imazhin(nëse nuk ekziton) dhe për të krijuar kontejnerat.Screnshot.Tash ne do të instalojm MySQL. Kam zgjedhur MySQL v8 ju mund të zgjedhni ndonjë version tjeter. Do të editojm  docker-compose.yml dhe do të shtojm konfigurimet për të instaluar MySQL.version: '3.1'services:  mysql:        image: mysql:8.0        container_name: mysql-server        command: --default-authentication-plugin=mysql_native_password#        working_dir: /application        volumes:          - .:/application        restart: always        environment:          - MYSQL_ROOT_PASSWORD=.test.          - MYSQL_DATABASE=my_db          - MYSQL_USER=db_user          - MYSQL_PASSWORD=.mypwd        ports:          - \"8082:3306\"  website:    container_name: php-demo    build:      context: ./    volumes:      - /src:/var/www/html    ports:      - 8000:80    depends_on:      - mysqlNë këtë konfigurim ju mund të shihni se kemi shtu një seksion të ri envrionment i cili përmbanë disa parametra që lidhen me lidhjen me serverin MySQL. Porti i parazgjedhur 3306 është mapuar(eng. mapped) me portin 8082. Seksioni restart: always nënkupton kurdo që fillon kontejneri, MyQL do të filloj po ashtu.Mund të keni vrejtur se kemi shtuar edhe seksioni depends_on, kjo nënkupton për të filluar servisi PHP, duhet të filloj së pari serveri MySQL.Duhet të bëjm disa ndryshime në Dockerfile, ku do të shtojm konfigurime për instalimin e MySQL.FROM php:8.0-apache#Install gitRUN apt-get update \\    &amp;&amp; apt-get install -y RUN docker-php-ext-install pdo pdo_mysql mysqliCOPY src/ /var/www/html/EXPOSE 80Ju duhet të instaloni një paket menagjuse për të ekzekutuar komandat e juaja mbrenda kontejnerit.Psh. apt-get është një paket menagjuse që ndihmon në trajtimin e paketave në Linux. Si dhe duhet të instaloni Git.  Për më shumë detaje për paketa menagjuse ju lutem lexoni më shumë. ## shto linkunKemi instaluar PHP extension si dhe MySQL. Në këtë rast docker ofron docker-php-ext-install për te instaluar shtesat për PHP.Nese deshironi mund te instaloni edhe PHP Composer(shto linkun) e dim që është një paket menagjuse për PHP.Për të implementuar ndryshimet qe i kemi bërë në Dockerfile ne duhet të ekzekutojm komandën docker-compose up --build. Nëse nuk e shtojm --build docker-compose do të pranoj(access) imazhin i cili është shkarkuar më parë dhe konfigurimet e saj.Nëse shkoni në shleftues localhost:8080 mund të shihni se të gjitha shtesat per mysql janë instaluar.Ndoshta jeni duke pytur veten se si mund të shohim nëse është instaluar git si dhe nëse është duke ekzekutuar/running mysql?Lidhshmëria në mes kontejnerëve në DockerTash do të shohim si është bërë lidhshmëria në mes kontejnerëve në Docker.Përmendëm më lart se Docker na lejon me i ekzekutu komadat në kotejnerin që kemi krijuar dhe këtë mund ta bëjm duke ekzekutar komandën docker exec. Vihet pytja si mund të kyqem në MySQL? Së pari ne duhet të dijm emrin e imazhit për MySQL, dhe këtë informat e marin duke ekzekutuar docker ps -a në terminal.Shikoni konfigurimet në docker-compose.yml që kemi bërë dhe e shihni që emrin e kontejnerit kemi vendos mysql-server-80. Dhe përgjigjen e pytjës që bëm mund ta marrim duke ekzekutuar këtë kommand në terminal:docker exec -it mysql-server-80 bash -l-it –&gt;Take screenshot.Tash jemi mrena kontejnerit, na lejohet të shkruajm komanda të Linux pasi kemi instaluar paketen menagjuse apt-get.Shkruani komandën ls ose qfar do komande tjetër.Takse screenshot.Për tu kyqyr në databazë duhet të shkruani këtë komand.mysql -u root -p-u -&gt; user-p -&gt; passwordNëse doni me i pa databazat, duhet të shkruani në terminalin tuaj show databases.Pra ktu treguam se si mund të shohim si është duke ekzekutar MySQL brenda Docker. Por si mund të interakt MySQL jasht docker? Si mund të konektohet MySQL client me MySQL server mbrenda kontejner? Këtë lidhje mund ta bëjm nëse bëjm port forwarding.Së pari duhet të dijm id e kontejnerit si dhe portin dhe këto informata mund të gjejm duke ekzekutuar kommanden docker ps -a.Take screenshot.Mund të shihni se si Porti është percjell si dhe në cilin IP.Në rastin ton kemi 0.0.0:8082-&gt;3306/tcp.Pra 0.0.0 është host dhe porti është 8082.Një komand tjeter se si mund të shihni portin e një kontejnerit docker port 354675757456(containerid).Interaksioni në mes disa kontejnerve në DockerPra kuptuam se si docker mund të kominikoj jasht, por cfar nëse kontejnerët duhet me interakt mes vete?Një mënyr është të lidhemi(konektohemi) nëpermes IP së brendshme. Këtë mund të shihni duke shkruar komandën në terminalin tuaj docker inspect [container-id], ky container-id është ID e kontejnerit për MySQL.Tash do të editojm index.php dhe të shkruajm kodin për të bërë lidhjen me databazë.&lt;?php$conn = new mysqli(\"mysql\", \"root\", \".\", \"my_db\");// Check connectionif ($conn-&gt;connect_error) {\tdie(\"Connection failed: \" . $conn-&gt;connect_error);}$sql = \"SELECT name FROM users\";$result = $conn-&gt;query($sql);if ($result-&gt;num_rows &gt; 0) {\t// output data of each row\twhile($row = $result-&gt;fetch_assoc()) {\t\techo $row['name'].\"&lt;br&gt;\";\t}} else {\techo \"0 results\";}$conn-&gt;close();Nëse doni të ndalni docker-compose, atëher duhet të shkruani këtë komand docker-compose down.KonkluzioniNë këtë artikull mësuam se si mund të konfigurojm mjesdise të shumëfishta me ndihmën e docker.",
            "content_html": "<p>Në <a href=\"https://programerat.github.io/2022/01/si-te-krijoni-aplikacionin-tuaj-te-pare-me-docker\">artikullin e parë</a>, kemi bërë një prezantim të shkurtër qfarë është Docker, si mund të instaloni si dhe si mund të konfiguroni Docker për një aplikacion bazik në PHP.Në këtë artikull do të tregojm si mund të përdorim Docker Compose si dhe do të ndërtojmë një aplikacion të thjesht në PHP që do të komunikojë me MySQL.</p><h3 id=\"docker-compose\">Docker Compose</h3><p>Në arikullin e kaluar mësuam si të krijojm një Dockerfile dhe që përmes komandave <code class=\"language-plaintext highlighter-rouge\">docker build</code> dhe <code class=\"language-plaintext highlighter-rouge\">docker run</code> mund të ndërtojmë dhe të ekzekutojm një kontejnerë. Mirpo nëse duhet të ekzekutoni më shumë se një kontejnerë? Atëherë të ekzekutojmë këto komanda do të jetë e lodhshme.</p><p>Për këtë ju mund të kosideroni të përdorni Compose, një skedarë që përmbanë një bashkësi të instruksioneve, komandave për të përformuar një operim/veprim/funksionim.</p><p>Ashtu siq kemi krijuar Dockerfile për të definuar se si mund të duket një imazh, ne po ashtu mund të krijojm një <code class=\"language-plaintext highlighter-rouge\">docker-compose.yml</code> skedarë ku mund të kemi imazhet që duam të përdorim, si dhe parametrat e komandave të docker ekzekutimit dhe të ndërtimit. Për të kuptuar më mirë do të marim një shembull duke krijuar skedarin tonë të parë <code class=\"language-plaintext highlighter-rouge\">docker-compose.yml</code>.</p><p>Së parim hapeni terminalin tuaj dhe shikoni versionin e docker compose në makinën tuaj duke shkruar këtë komand.</p><p><code class=\"language-plaintext highlighter-rouge\">docker-compose --version</code></p><p><img src=\"../assets/images/docker-compose-v.png\" alt=\"dockerComposeVersion\" /></p><p>Do të krijojmë një skedar bazik të docker compose, për shembullin në artikullin e parë.</p><div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">version</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">3'</span><span class=\"na\">services</span><span class=\"pi\">:</span>  <span class=\"na\">website</span><span class=\"pi\">:</span>    <span class=\"na\">container_name</span><span class=\"pi\">:</span> <span class=\"s\">php-demo</span>    <span class=\"na\">build</span><span class=\"pi\">:</span>      <span class=\"na\">context</span><span class=\"pi\">:</span> <span class=\"s\">./</span>    <span class=\"na\">volumes</span><span class=\"pi\">:</span>      <span class=\"pi\">-</span> <span class=\"s\">/src/index.php:/var/www/html/</span> <span class=\"c1\">#check volumes</span>    <span class=\"na\">ports</span><span class=\"pi\">:</span>      <span class=\"pi\">-</span> <span class=\"s\">8000:80</span></code></pre></div></div><ol>  <li>Në reshtin parë <code class=\"language-plaintext highlighter-rouge\">version</code> duhet të shkruani versionin e docker compose.</li>  <li><code class=\"language-plaintext highlighter-rouge\">services</code> përmbanë një list të gjitha veglave/serviset që keni për qëllim të ekzekutoni. Unë e kam emruar <code class=\"language-plaintext highlighter-rouge\">website</code> për arsyje se kemi me printu një titull në shfletues, por ju mund të emroni edhe ndryshe, nuk ka rëndsi. Duhet të mbani mend se këtë emer do ta përdorim për të komunikuar me kontejner të tjerë.</li>  <li><code class=\"language-plaintext highlighter-rouge\">container_name</code> këtu duhet të emroni emrin e kontejnerit. 4. <code class=\"language-plaintext highlighter-rouge\">image</code> duhet të vendosni emrin e imazhit.</li>  <li>Nër seksioni <code class=\"language-plaintext highlighter-rouge\">build</code> ju shihni se kemi <code class=\"language-plaintext highlighter-rouge\">context</code> që do të thot është duke shikuar për <code class=\"language-plaintext highlighter-rouge\">Dockerfile</code>. Pra duhet të shkruani direktoriumin se ku gjendet <code class=\"language-plaintext highlighter-rouge\">Dockerfile</code> i juaji.</li></ol><p>Skedari i juaj docker-compose.yml është gati dhe treguam për secilin seksion qka duhet të shkruajm. Përpara se të ekzekutoni është mirë të shikojm nëse konfigurimi në skedarin tonë është në rregull duke ekzekutuar në terminal komandën <code class=\"language-plaintext highlighter-rouge\">docker-compose config</code>.</p><p>Take screenshot.</p><p>Siq shihet edhe në foton paraprake pra konfigurimet tona kan qenë në rregull. Tani mund të ekzekutojm <code class=\"language-plaintext highlighter-rouge\">docker-compose up</code> për të krijuar imazhin(nëse nuk ekziton) dhe për të krijuar kontejnerat.</p><p>Screnshot.</p><p>Tash ne do të instalojm MySQL. Kam zgjedhur MySQL v8 ju mund të zgjedhni ndonjë version tjeter. Do të editojm  <code class=\"language-plaintext highlighter-rouge\">docker-compose.yml</code> dhe do të shtojm konfigurimet për të instaluar MySQL.</p><div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">version</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">3.1'</span><span class=\"na\">services</span><span class=\"pi\">:</span>  <span class=\"na\">mysql</span><span class=\"pi\">:</span>        <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">mysql:8.0</span>        <span class=\"na\">container_name</span><span class=\"pi\">:</span> <span class=\"s\">mysql-server</span>        <span class=\"na\">command</span><span class=\"pi\">:</span> <span class=\"s\">--default-authentication-plugin=mysql_native_password</span><span class=\"c1\">#        working_dir: /application</span>        <span class=\"na\">volumes</span><span class=\"pi\">:</span>          <span class=\"pi\">-</span> <span class=\"s\">.:/application</span>        <span class=\"na\">restart</span><span class=\"pi\">:</span> <span class=\"s\">always</span>        <span class=\"na\">environment</span><span class=\"pi\">:</span>          <span class=\"pi\">-</span> <span class=\"s\">MYSQL_ROOT_PASSWORD=.test.</span>          <span class=\"pi\">-</span> <span class=\"s\">MYSQL_DATABASE=my_db</span>          <span class=\"pi\">-</span> <span class=\"s\">MYSQL_USER=db_user</span>          <span class=\"pi\">-</span> <span class=\"s\">MYSQL_PASSWORD=.mypwd</span>        <span class=\"na\">ports</span><span class=\"pi\">:</span>          <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">8082:3306\"</span><span class=\"err\">  </span><span class=\"na\">website</span><span class=\"pi\">:</span>    <span class=\"na\">container_name</span><span class=\"pi\">:</span> <span class=\"s\">php-demo</span>    <span class=\"na\">build</span><span class=\"pi\">:</span>      <span class=\"na\">context</span><span class=\"pi\">:</span> <span class=\"s\">./</span>    <span class=\"na\">volumes</span><span class=\"pi\">:</span>      <span class=\"pi\">-</span> <span class=\"s\">/src:/var/www/html</span>    <span class=\"na\">ports</span><span class=\"pi\">:</span>      <span class=\"pi\">-</span> <span class=\"s\">8000:80</span>    <span class=\"na\">depends_on</span><span class=\"pi\">:</span>      <span class=\"pi\">-</span> <span class=\"s\">mysql</span></code></pre></div></div><p>Në këtë konfigurim ju mund të shihni se kemi shtu një seksion të ri <code class=\"language-plaintext highlighter-rouge\">envrionment</code> i cili përmbanë disa parametra që lidhen me lidhjen me serverin MySQL. Porti i parazgjedhur 3306 është mapuar(eng. mapped) me portin 8082. Seksioni <code class=\"language-plaintext highlighter-rouge\">restart: always</code> nënkupton kurdo që fillon kontejneri, MyQL do të filloj po ashtu.Mund të keni vrejtur se kemi shtuar edhe seksioni <code class=\"language-plaintext highlighter-rouge\">depends_on</code>, kjo nënkupton për të filluar servisi PHP, duhet të filloj së pari serveri MySQL.</p><p>Duhet të bëjm disa ndryshime në Dockerfile, ku do të shtojm konfigurime për instalimin e MySQL.</p><div class=\"language-Dockerfile highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">FROM</span><span class=\"s\"> php:8.0-apache</span><span class=\"c\">#Install git</span><span class=\"k\">RUN </span>apt-get update <span class=\"se\">\\</span>    <span class=\"o\">&amp;&amp;</span> apt-get <span class=\"nb\">install</span> <span class=\"nt\">-y</span> <span class=\"k\">RUN </span>docker-php-ext-install pdo pdo_mysql mysqli<span class=\"k\">COPY</span><span class=\"s\"> src/ /var/www/html/</span><span class=\"k\">EXPOSE</span><span class=\"s\"> 80</span></code></pre></div></div><p>Ju duhet të instaloni një paket menagjuse për të ekzekutuar komandat e juaja mbrenda kontejnerit.Psh. apt-get është një paket menagjuse që ndihmon në trajtimin e paketave në Linux. Si dhe duhet të instaloni Git.</p><blockquote>  <p>Për më shumë detaje për paketa menagjuse ju lutem lexoni më shumë. ## shto linkun</p></blockquote><p>Kemi instaluar PHP extension si dhe MySQL. Në këtë rast docker ofron <code class=\"language-plaintext highlighter-rouge\">docker-php-ext-install</code> për te instaluar shtesat për PHP.Nese deshironi mund te instaloni edhe PHP Composer(shto linkun) e dim që është një paket menagjuse për PHP.</p><p>Për të implementuar ndryshimet qe i kemi bërë në Dockerfile ne duhet të ekzekutojm komandën <code class=\"language-plaintext highlighter-rouge\">docker-compose up --build</code>. Nëse nuk e shtojm <code class=\"language-plaintext highlighter-rouge\">--build</code> docker-compose do të pranoj(access) imazhin i cili është shkarkuar më parë dhe konfigurimet e saj.</p><p>Nëse shkoni në shleftues localhost:8080 mund të shihni se të gjitha shtesat per mysql janë instaluar.</p><p>Ndoshta jeni duke pytur veten se si mund të shohim nëse është instaluar git si dhe nëse është duke ekzekutuar/running mysql?</p><h4 id=\"lidhshmëria-në-mes-kontejnerëve-në-docker\">Lidhshmëria në mes kontejnerëve në Docker</h4><p>Tash do të shohim si është bërë lidhshmëria në mes kontejnerëve në Docker.</p><p>Përmendëm më lart se Docker na lejon me i ekzekutu komadat në kotejnerin që kemi krijuar dhe këtë mund ta bëjm duke ekzekutar komandën <code class=\"language-plaintext highlighter-rouge\">docker exec</code>. Vihet pytja si mund të kyqem në MySQL? Së pari ne duhet të dijm emrin e imazhit për MySQL, dhe këtë informat e marin duke ekzekutuar <code class=\"language-plaintext highlighter-rouge\">docker ps -a</code> në terminal.</p><p>Shikoni konfigurimet në docker-compose.yml që kemi bërë dhe e shihni që emrin e kontejnerit kemi vendos <code class=\"language-plaintext highlighter-rouge\">mysql-server-80</code>. Dhe përgjigjen e pytjës që bëm mund ta marrim duke ekzekutuar këtë kommand në terminal:<code class=\"language-plaintext highlighter-rouge\">docker exec -it mysql-server-80 bash -l</code></p><p><code class=\"language-plaintext highlighter-rouge\">-it</code> –&gt;</p><p>Take screenshot.</p><p>Tash jemi mrena kontejnerit, na lejohet të shkruajm komanda të Linux pasi kemi instaluar paketen menagjuse apt-get.Shkruani komandën <code class=\"language-plaintext highlighter-rouge\">ls</code> ose qfar do komande tjetër.</p><p>Takse screenshot.Për tu kyqyr në databazë duhet të shkruani këtë komand.<code class=\"language-plaintext highlighter-rouge\">mysql -u root -p</code><code class=\"language-plaintext highlighter-rouge\">-u</code> -&gt; user<code class=\"language-plaintext highlighter-rouge\">-p</code> -&gt; password</p><p>Nëse doni me i pa databazat, duhet të shkruani në terminalin tuaj <code class=\"language-plaintext highlighter-rouge\">show databases</code>.</p><p>Pra ktu treguam se si mund të shohim si është duke ekzekutar MySQL brenda Docker. Por si mund të interakt MySQL jasht docker? Si mund të konektohet MySQL client me MySQL server mbrenda kontejner? Këtë lidhje mund ta bëjm nëse bëjm port forwarding.</p><p>Së pari duhet të dijm id e kontejnerit si dhe portin dhe këto informata mund të gjejm duke ekzekutuar kommanden <code class=\"language-plaintext highlighter-rouge\">docker ps -a</code>.</p><p>Take screenshot.Mund të shihni se si Porti është percjell si dhe në cilin IP.Në rastin ton kemi 0.0.0:8082-&gt;3306/tcp.Pra 0.0.0 është host dhe porti është 8082.</p><p>Një komand tjeter se si mund të shihni portin e një kontejnerit <code class=\"language-plaintext highlighter-rouge\">docker port 354675757456(containerid)</code>.</p><h4 id=\"interaksioni-në-mes-disa-kontejnerve-në-docker\">Interaksioni në mes disa kontejnerve në Docker</h4><p>Pra kuptuam se si docker mund të kominikoj jasht, por cfar nëse kontejnerët duhet me interakt mes vete?</p><p>Një mënyr është të lidhemi(konektohemi) nëpermes IP së brendshme. Këtë mund të shihni duke shkruar komandën në terminalin tuaj <code class=\"language-plaintext highlighter-rouge\">docker inspect [container-id]</code>, ky container-id është ID e kontejnerit për MySQL.</p><p>Tash do të editojm index.php dhe të shkruajm kodin për të bërë lidhjen me databazë.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?php</span><span class=\"nv\">$conn</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">mysqli</span><span class=\"p\">(</span><span class=\"s2\">\"mysql\"</span><span class=\"p\">,</span> <span class=\"s2\">\"root\"</span><span class=\"p\">,</span> <span class=\"s2\">\".\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my_db\"</span><span class=\"p\">);</span><span class=\"c1\">// Check connection</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$conn</span><span class=\"o\">-&gt;</span><span class=\"n\">connect_error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">die</span><span class=\"p\">(</span><span class=\"s2\">\"Connection failed: \"</span> <span class=\"mf\">.</span> <span class=\"nv\">$conn</span><span class=\"o\">-&gt;</span><span class=\"n\">connect_error</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"nv\">$sql</span> <span class=\"o\">=</span> <span class=\"s2\">\"SELECT name FROM users\"</span><span class=\"p\">;</span><span class=\"nv\">$result</span> <span class=\"o\">=</span> <span class=\"nv\">$conn</span><span class=\"o\">-&gt;</span><span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"nv\">$sql</span><span class=\"p\">);</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$result</span><span class=\"o\">-&gt;</span><span class=\"n\">num_rows</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"c1\">// output data of each row</span>\t<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"nv\">$row</span> <span class=\"o\">=</span> <span class=\"nv\">$result</span><span class=\"o\">-&gt;</span><span class=\"nf\">fetch_assoc</span><span class=\"p\">())</span> <span class=\"p\">{</span>\t\t<span class=\"k\">echo</span> <span class=\"nv\">$row</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span><span class=\"mf\">.</span><span class=\"s2\">\"&lt;br&gt;\"</span><span class=\"p\">;</span>\t<span class=\"p\">}</span><span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\t<span class=\"k\">echo</span> <span class=\"s2\">\"0 results\"</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"nv\">$conn</span><span class=\"o\">-&gt;</span><span class=\"nf\">close</span><span class=\"p\">();</span></code></pre></div></div><p>Nëse doni të ndalni docker-compose, atëher duhet të shkruani këtë komand <code class=\"language-plaintext highlighter-rouge\">docker-compose down</code>.</p><h2 id=\"konkluzioni\">Konkluzioni</h2><p>Në këtë artikull mësuam se si mund të konfigurojm mjesdise të shumëfishta me ndihmën e docker.</p>",
            "url": "https://programerat.github.io/2022/01/si-te-perdorim-docker-compose",
            
            
            
            "tags": ["Docker-compose,","php,","mysql"],
            
            "date_published": "2022-01-13T11:12:00+01:00",
            "date_modified": "2022-01-13T11:12:00+01:00",
            
                "author": "donjetam"
            
        },
    
        {
            "id": "https://programerat.github.io/2022/01/si-te-krijoni-aplikacionin-tuaj-te-pare-me-docker",
            "title": "Si të krijoni aplikacionin tuaj të parë me Docker",
            "summary": null,
            "content_text": "Së pari do të bëjmë  një prezentim  të shkurtër për të parë se çfarë është Docker dhe pse ta përdorim, pastaj do të marr një shembull për të parë se  si mund  të krijoni aplikacionin tuaj të parë me Docker 🚀🚀.Çfarë është Docker?Docker është një platformë e hapur për zhvillimin, lansimin dhe ekzekutimin e aplikacioneve.  Nuk është e obligueshme  të instaloni server në makinën tuaj lokale si XAMPP ose Apache Tomcat. Me Docker  gjithashtu mund të menaxhoni infrastrukturën tuaj në të njëjtën mënyrë  siç e menaxhoni aplikacionin tuaj.Pra Docker i ofron mundësinë përdoruesit për të paketuar dhe ekzekutuar një aplikacion në një mjedis të pavarur.  Ky mjedis i izoluar quhet konteiner (eng. Containers).Konteinerët  janë të lehtë për tu konfiguruar dhe përmbajnë  gjithçka që nevojitet për të ekzekutuar aplikacionin tuaj. Pra në një konteiner  mund të vendosni aplikacionin tuaj, një databazë ose një sistem operativ etj. Po ashtu ju mund të ekzekutoni edhe një apo më shumë konteinerë  në çdo lloj  makine, server apo cloud.ImazhetNjë imazh Docker përmbanë  gjithçka që nevojitet për të ekzekutuar një aplikacion në një konteiner.Kjo përfshinë:  kodin  kohën e ekzekutimit (eng. runtime)  librarit  variablat e mjedisit(eng. enviroment variables)  skedarët e konfigurimit(eng. configuration files)Imazhi më pas mund të vendoset në çdo mjedis Docker dhe të ekzekutohet si një konteiner.KontejnerNjë kontejner është një shembull i ekzekutushëm i një imazhi . Nga një imazh mund të krijoni kontejnerë të shumtë, po ashtu mund të lidhni një kontejner me një ose më shumë rrjete(eng. networks), të bashkangjitni një ruatje (eng. stroage) në të ose të krijoni një imazh bazuar në fazën aktuale.Pse duhet me përdor Docker një zhvillues?Për t’iu përgjigje më së miri kësaj pyetje, shih listën më poshtë për përfitimet që mund të gjeni:  Docker është i shpejtë. Ndryshe nga një makinë virtuale, aplikacioni juaj mund të fillojë në pak sekonda dhe të ndalojë po aq shpejt.  Docker është multi-platformë. Ju mund të ekzekutoni konteinerin tuaj në çdo sistem.  Konteinerët mund të ndërtohen dhe shkatërrohen më shpejt se një makinë virtuale.  Nuk ka më vështirësi në konfigurimin e mjedisit tuaj të punës. Pasi të konfigurohet Docker i juaj, nuk do t’ju duhet të riinstaloni më manualisht varësitë tuaja.  Nëse ndryshoni kompjuterin e punës ose nëse një punonjës i bashkohet kompanisë tuaj, ju duhet t’i jepni atyre vetëm konfigurimin tuaj.  Ju e mbani të pastër hapësirën tuaj të punës, pasi secili prej mjediseve tuaja do të jetë i izoluar dhe ju mund t’i fshini ato në çdo kohë pa ndikuar në pjesën tjetër.  Do të jetë më e lehtë të lansoni projektin tuaj në serverin tuaj në mënyrë që ta vendosni atë në internet.Si te instalojm Docker?Docker është në dispozicion për të gjitha sistemet operative, MacOS, Windows dhe Linux.Për detaje se si të  instaloni Docker në sistemin operativ mund ti gjeni në këtë link https://docs.docker.com/get-docker/Pasi të instalohet Docker me sukses dhe e startoni në kompjuterin tuaj,  hapeni një terminal dhe shkruani këtë komandë për të shikuar se cili version i Docker është instaluar:docker versionShembull si të paketojmë aplikacionin tuaj në DockerTani keni njohuri se çfarë është Docker, pra, është koha për të krijuar aplikacionin tuaj të parë!Qëllimi i ketij tutoriali të shkurtër është të paketojmë një Aplikacion në PHP.Krijo projektin e tuajPër të krijuar aplikacionin tuaj të parë Docker, ju rekomandoj të krijoni një folder të strukturuar si më poshtë:.├── demo-php    ── index.php└── Dockerfiledemo-php/index.php (Ky është një skedar(eng. file) PHP i cili printon vetëm një tekst). Dockerfile (Ky skedar do të përmbajë udhëzimet e nevojshme se si të shpërndajmë një aplikacion të thjeshtë në PHP).  Dockerfile është një tekst që përmbanë të gjitha komandat për të ndërtuar një imazh.Edito index.php skedar dhe shto një tekst&lt;?php         echo \"Docker është magjik!\"?&gt;Edito DockerfileGjëja e parë që duhet të bëni kur dëshironi të krijoni skedarin tuaj Dockerfile është të pyesni veten se çfarë doni të bëni. Qëllimi ynë këtu është të lansojmë (eng. deploy) një aplikacion në PHP.Hapi i parë që duhet të bëni kur krijoni një skedar Dockerfile është të hyni në faqen DockerHub. Kjo faqe përmbanë  shumë imazhe të para-projektuara për të kursyer kohën tuaj (për shembull: të gjitha imazhet për php apache).Në rastin tonë, ne do të shkruajmë “PHP Apache” në shiritin e kërkimit, dhe do përzgjedhim imazhin me tag 7.2-apache.FROM php:7.2-apache ## Ky imazh është marr nga dockerhub.COPY index.php /var/www/html/index.php ## Skedari index.php është kopjuar në direktorinë /var/www/html në imazh.EXPOSE 80 ## Porti 80 është ekspozuar për apache.CMD [\"usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"] ## Apache ka filluar në kontenjer.Krijo imazhin DockerPasi kodi juaj është i shkruar në Dockerfile, gjithçka që duhet të bëni është të krijoni imazhin tuaj që të përmbajë aplikacionin tuaj.Hapeni një terminal dhe shkruani komadën më poshtë:docker build -t php-demo:latest . Opsioni -t ju mundëson të përcaktoni emrin e imazhit tuaj. Në rastin tonë ne kemi zgjedhur php-demo por ju mund të vendosni çfarë do emri që dëshironi si dhe tag është latest ose mund te vendosni v1(versioni i parë).Ekzekutoni imazhin në kontejnerPër të ekzekutuar imazhin ju mund të përdorni komandën docker run docker run php-demo:latest. Nëse dëshirojmë që ti qasemi aplikacionit nga shfletuesi, duhet publikuar portin 9090 në mënyrë që ti qasemi konteinerit që kemi ndërtuar me port 80. Nëse një kërkesë do të vijë në portin 9090, në këtë rast do ta ridrejtojë atë kërkesë në konteinerin tonë në portin 80.Nëse një kërkesë do të vijë në portin 9090, në këtë rast do të ridrejtojë atë kërkes në kontejnerin tonë në portin 80.docker run --name php-app -p 9090:80 php-demo:latestHapeni shfletuesin shkruani localhost:9090 dhe do të shihni tekstin që keni shkruar më parë ‘Docker është magjik’. Pra index.php është ruajtur brenda koteinerit sepse e kemi ndërtuar imazhin tonë duke përdorur Dockerfile nga lartë.Këtë projekt mund ta bëni clone nga Github në këtë link PHP DEMO.Komandat e nevojshme për Docker            Komandat      Përshkrimi                  docker images ls      Liston imazhet e juaja              docker image rm [image name]      Fshini një imazh specifik              docker image rm $(docker images -a -q)      Fshin te gjitha imazhet              docker ps -a      Liston të gjithë kontejnerët              docker stop [container name]      Ndalni një kontejner specifik              docker stop $(docker ps -a -q)      Ndalon të gjithë kontejnerët              docker rm [container name]      Fshini një kontejner specifik              docker rm $(docker ps -a -q)      Fshin të gjithë kontejnerët              docker logs [container name]      Shfaq të gjithë logs të një kontejneri specifik      KonkluzioniNë këtë artikull, ne kemi diskutuar se si të paketojmë një PHP aplikacion bazik. Nëse keni ndonjë pyetje ose feedback ju lutem ndjehuni të lirë të postoni më poshtë. 👇",
            "content_html": "<p>Së pari do të bëjmë  një prezentim  të shkurtër për të parë se çfarë është Docker dhe pse ta përdorim, pastaj do të marr një shembull për të parë se  si mund  të krijoni aplikacionin tuaj të parë me Docker 🚀🚀.</p><h3 id=\"çfarë-është-docker\">Çfarë është Docker?</h3><p>Docker është një platformë e hapur për zhvillimin, lansimin dhe ekzekutimin e aplikacioneve.  Nuk është e obligueshme  të instaloni server në makinën tuaj lokale si XAMPP ose Apache Tomcat. Me Docker  gjithashtu mund të menaxhoni infrastrukturën tuaj në të njëjtën mënyrë  siç e menaxhoni aplikacionin tuaj.</p><p><img src=\"/assets/images/docker.png\" alt=\"Docker\" /></p><p>Pra Docker i ofron mundësinë përdoruesit për të paketuar dhe ekzekutuar një aplikacion në një mjedis të pavarur.  <br />Ky mjedis i izoluar quhet konteiner (eng. Containers).</p><p>Konteinerët  janë të lehtë për tu konfiguruar dhe përmbajnë  gjithçka që nevojitet për të ekzekutuar aplikacionin tuaj. Pra në një konteiner  mund të vendosni aplikacionin tuaj, një databazë ose një sistem operativ etj. Po ashtu ju mund të ekzekutoni edhe një apo më shumë konteinerë  në çdo lloj  makine, server apo cloud.</p><h3 id=\"imazhet\">Imazhet</h3><p>Një imazh Docker përmbanë  gjithçka që nevojitet për të ekzekutuar një aplikacion në një konteiner.Kjo përfshinë:</p><ul>  <li>kodin</li>  <li>kohën e ekzekutimit (eng. runtime)</li>  <li>librarit</li>  <li>variablat e mjedisit(eng. enviroment variables)</li>  <li>skedarët e konfigurimit(eng. configuration files)</li></ul><p>Imazhi më pas mund të vendoset në çdo mjedis Docker dhe të ekzekutohet si një konteiner.</p><h3 id=\"kontejner\">Kontejner</h3><p>Një kontejner është një shembull i ekzekutushëm i një imazhi . Nga një imazh mund të krijoni kontejnerë të shumtë, po ashtu mund të lidhni një kontejner me një ose më shumë rrjete(eng. networks), të bashkangjitni një ruatje (eng. stroage) në të ose të krijoni një imazh bazuar në fazën aktuale.</p><h3 id=\"pse-duhet-me-përdor-docker-një-zhvillues\">Pse duhet me përdor Docker një zhvillues?</h3><p>Për t’iu përgjigje më së miri kësaj pyetje, shih listën më poshtë për përfitimet që mund të gjeni:</p><ol>  <li>Docker është i shpejtë. Ndryshe nga një makinë virtuale, aplikacioni juaj mund të fillojë në pak sekonda dhe të ndalojë po aq shpejt.</li>  <li>Docker është multi-platformë. Ju mund të ekzekutoni konteinerin tuaj në çdo sistem.</li>  <li>Konteinerët mund të ndërtohen dhe shkatërrohen më shpejt se një makinë virtuale.</li>  <li>Nuk ka më vështirësi në konfigurimin e mjedisit tuaj të punës. Pasi të konfigurohet Docker i juaj, nuk do t’ju duhet të riinstaloni më manualisht varësitë tuaja.</li>  <li>Nëse ndryshoni kompjuterin e punës ose nëse një punonjës i bashkohet kompanisë tuaj, ju duhet t’i jepni atyre vetëm konfigurimin tuaj.</li>  <li>Ju e mbani të pastër hapësirën tuaj të punës, pasi secili prej mjediseve tuaja do të jetë i izoluar dhe ju mund t’i fshini ato në çdo kohë pa ndikuar në pjesën tjetër.</li>  <li>Do të jetë më e lehtë të lansoni projektin tuaj në serverin tuaj në mënyrë që ta vendosni atë në internet.</li></ol><h3 id=\"si-te-instalojm-docker\">Si te instalojm Docker?</h3><p>Docker është në dispozicion për të gjitha sistemet operative, MacOS, Windows dhe Linux.</p><p>Për detaje se si të  instaloni Docker në sistemin operativ mund ti gjeni në këtë link <a href=\"https://docs.docker.com/get-docker/\">https://docs.docker.com/get-docker/</a></p><p>Pasi të instalohet Docker me sukses dhe e startoni në kompjuterin tuaj,  hapeni një terminal dhe shkruani këtë komandë për të shikuar se cili version i Docker është instaluar:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker version</code></pre></div></div><p><img src=\"/assets/images/docker-version.png\" alt=\"DockerVersion\" /></p><h3 id=\"shembull-si-të-paketojmë-aplikacionin-tuaj-në-docker\">Shembull si të paketojmë aplikacionin tuaj në Docker</h3><p>Tani keni njohuri se çfarë është Docker, pra, është koha për të krijuar aplikacionin tuaj të parë!Qëllimi i ketij tutoriali të shkurtër është të paketojmë një Aplikacion në PHP.</p><h4 id=\"krijo-projektin-e-tuaj\">Krijo projektin e tuaj</h4><p>Për të krijuar aplikacionin tuaj të parë Docker, ju rekomandoj të krijoni një folder të strukturuar si më poshtë:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">.</span>├── demo-php    ── index.php└── Dockerfile</code></pre></div></div><p><code class=\"language-plaintext highlighter-rouge\">demo-php/index.php</code> (Ky është një skedar(eng. file) PHP i cili printon vetëm një tekst). <code class=\"language-plaintext highlighter-rouge\">Dockerfile</code> (Ky skedar do të përmbajë udhëzimet e nevojshme se si të shpërndajmë një aplikacion të thjeshtë në PHP).</p><blockquote>  <p>Dockerfile është një tekst që përmbanë të gjitha komandat për të ndërtuar një imazh.</p></blockquote><h4 id=\"edito-indexphp-skedar-dhe-shto-një-tekst\">Edito index.php skedar dhe shto një tekst</h4><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?php</span>         <span class=\"k\">echo</span> <span class=\"s2\">\"Docker është magjik!\"</span><span class=\"cp\">?&gt;</span></code></pre></div></div><h4 id=\"edito-dockerfile\">Edito Dockerfile</h4><p>Gjëja e parë që duhet të bëni kur dëshironi të krijoni skedarin tuaj Dockerfile është të pyesni veten se çfarë doni të bëni. Qëllimi ynë këtu është të lansojmë (eng. deploy) një aplikacion në PHP.</p><p>Hapi i parë që duhet të bëni kur krijoni një skedar Dockerfile është të hyni në faqen <a href=\"https://hub.docker.com/\">DockerHub</a>. Kjo faqe përmbanë  shumë imazhe të para-projektuara për të kursyer kohën tuaj (për shembull: të gjitha imazhet për php apache).</p><p>Në rastin tonë, ne do të shkruajmë “PHP Apache” në shiritin e kërkimit, dhe do përzgjedhim imazhin me tag <code class=\"language-plaintext highlighter-rouge\">7.2-apache</code>.</p><div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s\">FROM php:7.2-apache</span> <span class=\"c1\">## Ky imazh është marr nga dockerhub.</span><span class=\"s\">COPY index.php /var/www/html/index.php</span> <span class=\"c1\">## Skedari index.php është kopjuar në direktorinë /var/www/html në imazh.</span><span class=\"s\">EXPOSE </span><span class=\"m\">80</span> <span class=\"c1\">## Porti 80 është ekspozuar për apache.</span><span class=\"s\">CMD [\"usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"]</span> <span class=\"c1\">## Apache ka filluar në kontenjer.</span></code></pre></div></div><h4 id=\"krijo-imazhin-docker\">Krijo imazhin Docker</h4><p>Pasi kodi juaj është i shkruar në Dockerfile, gjithçka që duhet të bëni është të krijoni imazhin tuaj që të përmbajë aplikacionin tuaj.</p><p>Hapeni një terminal dhe shkruani komadën më poshtë:</p><p><code class=\"language-plaintext highlighter-rouge\">docker build -t php-demo:latest . </code></p><p>Opsioni <code class=\"language-plaintext highlighter-rouge\">-t</code> ju mundëson të përcaktoni emrin e imazhit tuaj. Në rastin tonë ne kemi zgjedhur <code class=\"language-plaintext highlighter-rouge\">php-demo</code> por ju mund të vendosni çfarë do emri që dëshironi si dhe tag është <code class=\"language-plaintext highlighter-rouge\">latest</code> ose mund te vendosni v1(versioni i parë).</p><p><img src=\"/assets/images/docker-build.png\" alt=\"DockerBuild\" /></p><h4 id=\"ekzekutoni-imazhin-në-kontejner\">Ekzekutoni imazhin në kontejner</h4><p>Për të ekzekutuar imazhin ju mund të përdorni komandën <code class=\"language-plaintext highlighter-rouge\">docker run docker run php-demo:latest</code>. Nëse dëshirojmë që ti qasemi aplikacionit nga shfletuesi, duhet publikuar portin <code class=\"language-plaintext highlighter-rouge\">9090</code> në mënyrë që ti qasemi konteinerit që kemi ndërtuar me port <code class=\"language-plaintext highlighter-rouge\">80</code>. Nëse një kërkesë do të vijë në portin <code class=\"language-plaintext highlighter-rouge\">9090</code>, në këtë rast do ta ridrejtojë atë kërkesë në konteinerin tonë në portin <code class=\"language-plaintext highlighter-rouge\">80</code>.</p><p>Nëse një kërkesë do të vijë në portin 9090, në këtë rast do të ridrejtojë atë kërkes në kontejnerin tonë në portin 80.</p><p><code class=\"language-plaintext highlighter-rouge\">docker run --name php-app -p 9090:80 php-demo:latest</code></p><p><img src=\"/assets/images/docker-run.png\" alt=\"DockerRun\" /></p><p>Hapeni shfletuesin shkruani <a href=\"http://localhost:9090\">localhost:9090</a> dhe do të shihni tekstin që keni shkruar më parë ‘Docker është magjik’. Pra index.php është ruajtur brenda koteinerit sepse e kemi ndërtuar imazhin tonë duke përdorur Dockerfile nga lartë.</p><p>Këtë projekt mund ta bëni clone nga Github në këtë link <a href=\"https://github.com/Programerat/first-php-docker-image\">PHP DEMO</a>.</p><h3 id=\"komandat-e-nevojshme-për-docker\">Komandat e nevojshme për Docker</h3><table>  <thead>    <tr>      <th>Komandat</th>      <th>Përshkrimi</th>    </tr>  </thead>  <tbody>    <tr>      <td><code class=\"language-plaintext highlighter-rouge\">docker images ls</code></td>      <td>Liston imazhet e juaja</td>    </tr>    <tr>      <td><code class=\"language-plaintext highlighter-rouge\">docker image rm [image name]</code></td>      <td>Fshini një imazh specifik</td>    </tr>    <tr>      <td><code class=\"language-plaintext highlighter-rouge\">docker image rm $(docker images -a -q)</code></td>      <td>Fshin te gjitha imazhet</td>    </tr>    <tr>      <td><code class=\"language-plaintext highlighter-rouge\">docker ps -a</code></td>      <td>Liston të gjithë kontejnerët</td>    </tr>    <tr>      <td><code class=\"language-plaintext highlighter-rouge\">docker stop [container name]</code></td>      <td>Ndalni një kontejner specifik</td>    </tr>    <tr>      <td><code class=\"language-plaintext highlighter-rouge\">docker stop $(docker ps -a -q)</code></td>      <td>Ndalon të gjithë kontejnerët</td>    </tr>    <tr>      <td><code class=\"language-plaintext highlighter-rouge\">docker rm [container name]</code></td>      <td>Fshini një kontejner specifik</td>    </tr>    <tr>      <td><code class=\"language-plaintext highlighter-rouge\">docker rm $(docker ps -a -q)</code></td>      <td>Fshin të gjithë kontejnerët</td>    </tr>    <tr>      <td><code class=\"language-plaintext highlighter-rouge\">docker logs [container name]</code></td>      <td>Shfaq të gjithë logs të një kontejneri specifik</td>    </tr>  </tbody></table><h3 id=\"konkluzioni\">Konkluzioni</h3><p>Në këtë artikull, ne kemi diskutuar se si të paketojmë një PHP aplikacion bazik. Nëse keni ndonjë pyetje ose feedback ju lutem ndjehuni të lirë të postoni më poshtë. 👇</p>",
            "url": "https://programerat.github.io/2022/01/si-te-krijoni-aplikacionin-tuaj-te-pare-me-docker",
            
            
            
            "tags": ["Docker","php"],
            
            "date_published": "2022-01-11T11:12:00+01:00",
            "date_modified": "2022-01-11T11:12:00+01:00",
            
                "author": "donjetam"
            
        },
    
        {
            "id": "https://programerat.github.io/2021/12/modelet-e-strukturimit-te-kodit-modeli-dekorues",
            "title": "Si ta përdorim modelin dekorues (eng. Decorator Pattern) për menagjim më të mirë të kodit.",
            "summary": "Modelet e strukturimit të kodit, Modeli dekorues",
            "content_text": "Modelet e dizajnimit të kodit janë një mënyr shum e mirë për të përmirsuar menagjimin e kodit dhe për të zvogëluar numrin e gabimeve(eng. bugs).Njëra nga modelet më të përdorura është modeli Dekorues, i cili të mundëson që të shtojmë logjikë në në objekt pa e ndryshuar implementimin origjinal të objektit.Qëllimi i këtij artikulli është që të shpjegoj se si përdoret ky model dhe si të aplikohet në dizajn.Gjithashtu do të marr disa shembuj se si aplikohet në kod që të kuptohet më lehtë në mënyr që ti ta aplikosh në projektin tënd. Hajde ti hijmë punës.DefinicioniModeli dekorues është ashtu si edhe tingëllon, është një model ose klasë që e dekoron një objekt pa patur nevojë të bëjmë ndryshime në klasën egzistuese.Ky model bën pjesë në kategorinë e modeleve te strukturimit të kodit.QellimiPse duhet të përdorim këtë model dhe çfar problemi na mundëson që të zgjedhim.Disa nga opcionet ku mund ta përdorim këtë model jan:  Nëse klasa egzistuese ka nevoj të përdoret edhe pse kemi nevoj për ndryshim të logjikës.  Nëse kodi i vjetër dhe kemi nevoj që ta ndryshojmë se si objekti sillet ose jep rezultat.AplikimiTa marrim shembull qe dojme ta krijojme një program do të automatizoj shtuarjen e ekstrave në një piza.UML DiagramiShembulliTa zëmë që e kemi një pizeri dhe dëshirojmë ta automatizojmë pjesën ku dëshirojmë të shtojmë ekstra shtesa në piza.P.SH nëse dojmë të shtojmë djathë, këpurdha, sallatë etj.Tash varet se ckaShembull se si nuk duhet aplikuar$userAskedFor = ['cheese', 'mushrooms'];interface Topping {  public function add(): void;}class DefaultTopping implements Topping {   public function add(): void   {    echo \"Adding Default toppings &lt;br&gt;\";  }}class TomatoTopping implements Topping{  private Topping $topping;    public function __construct(Topping $topping) {    $this-&gt;topping = $topping;    }    public function add(): void  {    echo $this-&gt;topping-&gt;add() . ' Adding Tomatoes &lt;br&gt;';   }}class CheeseTopping implements Topping{  private Topping $topping;    public function __construct(Topping $topping) {    $this-&gt;topping = $topping;    }    public function add(): void  {    echo $this-&gt;topping-&gt;add() . ' Adding Cheese &lt;br&gt;';   }}class MushroomTopping implements Topping{  private Topping $topping;    public function __construct(Topping $topping) {    $this-&gt;topping = $topping;    }    public function add(): void  {    echo $this-&gt;topping-&gt;add() . ' Adding Mushrooms &lt;br&gt;';    }}$toppings = new DefaultTopping();if (in_array('cheese', $userAskedFor)) {  $toppings = new CheeseTopping($toppings);}if (in_array('mushrooms', $userAskedFor)) {  $toppings = new MushroomTopping($toppings);}$toppings-&gt;add();/**---------------- OUTPUT Adding Default toppingsAdding CheeseAdding Mushrooms*/— english  AIHow to Use Decorator Pattern in Design Patterns for Better Code Management.Design patterns can be a great way to improve code management and reduce the number of bugs and errors. One of the most popular patterns is the decorator pattern, which enables you to add new functionality to an object without changing its original code. This article will introduce you to this pattern and some of its uses in designing coding. It will also provide some examples that give a better understanding on how this pattern might work in your own project. So what are you waiting for? Let’s dive right in!What Is the Decorator Pattern?The decorator pattern is a software design pattern, which can be applied to objects at runtime. It was first introduced by the “Gang of Four” in their book “Design Patterns: Elements of Reusable Object-Oriented Software.” The intent of this design pattern is to extend existing functionality without modifying the original code. It allows for new functionality to be added without having to change the code or interface of the original object. This way, it’s really easy to create your own customized features without altering any other part of the program.When to Use the Decorator PatternThe decorator pattern is a powerful tool for code management. It allows you to add new functionality to an object without changing its original code. You can think of it as a way to wrap objects or classes with other objects or classes.Decorators are often used in the following cases:      Adding logging and debugging information to an object        Adding validation and error checking        Adding specific routing rules for a URL        Supervising the lifetime of your application  The Decorator Pattern is most useful when you need to wrap objects or classes with other objects or classes that provide different behavior. One such case is when you need to add logging and debugging information to an object like this:public class Car { } // This is our basic car class.    // Now imagine we want to use the decorator pattern on this car object, so we can log it’s activity by adding a Decorator public class LoggerCarDecorator extends Car{ public LoggerCarDecorator(Car original){ super(original); } @Override public void stop() { System.out.println(“Stopped”); } @Override public void start() { System.out.println(“Started”); } } // We can now create a new instance of LoggerCarDecorator with the constructor Car newLoggerCar = new LoggerCarDecorator(new Car()); newLoggerCar.start();// “Started” would beThe Implementation of the Decorator PatternThis pattern is often used in cases where you need to add new functionality to an object without changing its code. For example, let’s say you have a function that calculates the area of a triangle. You might want to use this function to calculate the area of other shapes too, but don’t know how to do it.One way would be to use inheritance, using a base class for calculating areas and another class inheriting from it for other shapes. Though this is possible, there are cases when you just want to add functionality without modifying the original code. This is where decorators come in handy.A decorator derives from the same class as the object being decorated and adds its own functionality by overriding or wrapping other methods. You can then ‘decorate’ any object with this decoration by calling the constructor of your decorator class with the original object as an argument.Example of the Decorator Pattern in CodeThe following example demonstrates how the decorator pattern can be used.public class Car { public void Drive() { Console.WriteLine(“Car is driving”); } }public class SportsCar : Car { public override void Drive() { Console.WriteLine(“Sports car is driving”); } }public class Limousine : Car { public override void Drive() { Console.WriteLine(“Limousine is driving”); } }public class Van : Car { public override void Drive() { Console.WriteLine(“Van is driving”); } }var cars = new ListConclusionThe decorator pattern is a powerful software design pattern that allows you to add functionality to an existing class without having to subclass the original class and create a new instance.The power of this pattern lies in the fact that you can extend an existing object and add additional functionality without changing the original code.It’s a simple and elegant solution that can save time and effort, while still achieving your desired result.So, next time you need to add functionality to an existing object, why not consider the decorator pattern?",
            "content_html": "<p>Modelet e dizajnimit të kodit janë një mënyr shum e mirë për të përmirsuar menagjimin e kodit dhe për të zvogëluar numrin e gabimeve(eng. bugs).Njëra nga modelet më të përdorura është modeli Dekorues, i cili të mundëson që të shtojmë logjikë në në objekt pa e ndryshuar implementimin origjinal të objektit.</p><p>Qëllimi i këtij artikulli është që të shpjegoj se si përdoret ky model dhe si të aplikohet në dizajn.Gjithashtu do të marr disa shembuj se si aplikohet në kod që të kuptohet më lehtë në mënyr që ti ta aplikosh në projektin tënd. Hajde ti hijmë punës.</p><h3 id=\"definicioni\">Definicioni</h3><p>Modeli dekorues është ashtu si edhe tingëllon, është një model ose klasë që e dekoron një objekt pa patur nevojë të bëjmë ndryshime në klasën egzistuese.<br />Ky model bën pjesë në kategorinë e modeleve te strukturimit të kodit.</p><h3 id=\"qellimi\">Qellimi</h3><p>Pse duhet të përdorim këtë model dhe çfar problemi na mundëson që të zgjedhim.Disa nga opcionet ku mund ta përdorim këtë model jan:</p><ol>  <li>Nëse klasa egzistuese ka nevoj të përdoret edhe pse kemi nevoj për ndryshim të logjikës.</li>  <li>Nëse kodi i vjetër dhe kemi nevoj që ta ndryshojmë se si objekti sillet ose jep rezultat.</li></ol><h3 id=\"aplikimi\">Aplikimi</h3><p>Ta marrim shembull qe dojme ta krijojme një program do të automatizoj shtuarjen e ekstrave në një piza.</p><h3 id=\"uml-diagrami\">UML Diagrami</h3><p><img src=\"../assets/diagrams/decorator_pattern.png\" alt=\"UML diagrami i modelit strategji\" /></p><p><img src=\"../assets/diagrams/wikipedia_decorator_pattern.jpg\" alt=\"Diagrami i huazuar nga wikipedia\" /></p><h3 id=\"shembulli\">Shembulli</h3><p>Ta zëmë që e kemi një pizeri dhe dëshirojmë ta automatizojmë pjesën ku dëshirojmë të shtojmë ekstra shtesa në piza.P.SH nëse dojmë të shtojmë djathë, këpurdha, sallatë etj.Tash varet se cka</p><h3 id=\"shembull-se-si-nuk-duhet-aplikuar\">Shembull se si nuk duhet aplikuar</h3><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$userAskedFor</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'cheese'</span><span class=\"p\">,</span> <span class=\"s1\">'mushrooms'</span><span class=\"p\">];</span><span class=\"kd\">interface</span> <span class=\"nc\">Topping</span> <span class=\"p\">{</span>  <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">add</span><span class=\"p\">():</span> <span class=\"kt\">void</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"kd\">class</span> <span class=\"nc\">DefaultTopping</span> <span class=\"kd\">implements</span> <span class=\"nc\">Topping</span> <span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">add</span><span class=\"p\">():</span> <span class=\"kt\">void</span>   <span class=\"p\">{</span>    <span class=\"k\">echo</span> <span class=\"s2\">\"Adding Default toppings &lt;br&gt;\"</span><span class=\"p\">;</span>  <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">class</span> <span class=\"nc\">TomatoTopping</span> <span class=\"kd\">implements</span> <span class=\"nc\">Topping</span><span class=\"p\">{</span>  <span class=\"k\">private</span> <span class=\"kt\">Topping</span> <span class=\"nv\">$topping</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__construct</span><span class=\"p\">(</span><span class=\"kt\">Topping</span> <span class=\"nv\">$topping</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">topping</span> <span class=\"o\">=</span> <span class=\"nv\">$topping</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">add</span><span class=\"p\">():</span> <span class=\"kt\">void</span>  <span class=\"p\">{</span>    <span class=\"k\">echo</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">topping</span><span class=\"o\">-&gt;</span><span class=\"nf\">add</span><span class=\"p\">()</span> <span class=\"mf\">.</span> <span class=\"s1\">' Adding Tomatoes &lt;br&gt;'</span><span class=\"p\">;</span>   <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">class</span> <span class=\"nc\">CheeseTopping</span> <span class=\"kd\">implements</span> <span class=\"nc\">Topping</span><span class=\"p\">{</span>  <span class=\"k\">private</span> <span class=\"kt\">Topping</span> <span class=\"nv\">$topping</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__construct</span><span class=\"p\">(</span><span class=\"kt\">Topping</span> <span class=\"nv\">$topping</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">topping</span> <span class=\"o\">=</span> <span class=\"nv\">$topping</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">add</span><span class=\"p\">():</span> <span class=\"kt\">void</span>  <span class=\"p\">{</span>    <span class=\"k\">echo</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">topping</span><span class=\"o\">-&gt;</span><span class=\"nf\">add</span><span class=\"p\">()</span> <span class=\"mf\">.</span> <span class=\"s1\">' Adding Cheese &lt;br&gt;'</span><span class=\"p\">;</span>   <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">class</span> <span class=\"nc\">MushroomTopping</span> <span class=\"kd\">implements</span> <span class=\"nc\">Topping</span><span class=\"p\">{</span>  <span class=\"k\">private</span> <span class=\"kt\">Topping</span> <span class=\"nv\">$topping</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__construct</span><span class=\"p\">(</span><span class=\"kt\">Topping</span> <span class=\"nv\">$topping</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">topping</span> <span class=\"o\">=</span> <span class=\"nv\">$topping</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">add</span><span class=\"p\">():</span> <span class=\"kt\">void</span>  <span class=\"p\">{</span>    <span class=\"k\">echo</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">topping</span><span class=\"o\">-&gt;</span><span class=\"nf\">add</span><span class=\"p\">()</span> <span class=\"mf\">.</span> <span class=\"s1\">' Adding Mushrooms &lt;br&gt;'</span><span class=\"p\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"nv\">$toppings</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DefaultTopping</span><span class=\"p\">();</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">in_array</span><span class=\"p\">(</span><span class=\"s1\">'cheese'</span><span class=\"p\">,</span> <span class=\"nv\">$userAskedFor</span><span class=\"p\">))</span> <span class=\"p\">{</span>  <span class=\"nv\">$toppings</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">CheeseTopping</span><span class=\"p\">(</span><span class=\"nv\">$toppings</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">in_array</span><span class=\"p\">(</span><span class=\"s1\">'mushrooms'</span><span class=\"p\">,</span> <span class=\"nv\">$userAskedFor</span><span class=\"p\">))</span> <span class=\"p\">{</span>  <span class=\"nv\">$toppings</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MushroomTopping</span><span class=\"p\">(</span><span class=\"nv\">$toppings</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"nv\">$toppings</span><span class=\"o\">-&gt;</span><span class=\"nf\">add</span><span class=\"p\">();</span><span class=\"cd\">/**---------------- OUTPUT Adding Default toppingsAdding CheeseAdding Mushrooms*/</span></code></pre></div></div><p>— english  AI</p><h3 id=\"how-to-use-decorator-pattern-in-design-patterns-for-better-code-management\">How to Use Decorator Pattern in Design Patterns for Better Code Management.</h3><p>Design patterns can be a great way to improve code management and reduce the number of bugs and errors. One of the most popular patterns is the decorator pattern, which enables you to add new functionality to an object without changing its original code. This article will introduce you to this pattern and some of its uses in designing coding. It will also provide some examples that give a better understanding on how this pattern might work in your own project. So what are you waiting for? Let’s dive right in!</p><p>What Is the Decorator Pattern?The decorator pattern is a software design pattern, which can be applied to objects at runtime. It was first introduced by the “Gang of Four” in their book “Design Patterns: Elements of Reusable Object-Oriented Software.” The intent of this design pattern is to extend existing functionality without modifying the original code. It allows for new functionality to be added without having to change the code or interface of the original object. This way, it’s really easy to create your own customized features without altering any other part of the program.</p><p>When to Use the Decorator PatternThe decorator pattern is a powerful tool for code management. It allows you to add new functionality to an object without changing its original code. You can think of it as a way to wrap objects or classes with other objects or classes.</p><p>Decorators are often used in the following cases:</p><ul>  <li>    <p>Adding logging and debugging information to an object</p>  </li>  <li>    <p>Adding validation and error checking</p>  </li>  <li>    <p>Adding specific routing rules for a URL</p>  </li>  <li>    <p>Supervising the lifetime of your application</p>  </li></ul><p>The Decorator Pattern is most useful when you need to wrap objects or classes with other objects or classes that provide different behavior. One such case is when you need to add logging and debugging information to an object like this:</p><p>public class Car { } // This is our basic car class.    // Now imagine we want to use the decorator pattern on this car object, so we can log it’s activity by adding a Decorator public class LoggerCarDecorator extends Car{ public LoggerCarDecorator(Car original){ super(original); } @Override public void stop() { System.out.println(“Stopped”); } @Override public void start() { System.out.println(“Started”); } } // We can now create a new instance of LoggerCarDecorator with the constructor Car newLoggerCar = new LoggerCarDecorator(new Car()); newLoggerCar.start();// “Started” would be</p><p>The Implementation of the Decorator PatternThis pattern is often used in cases where you need to add new functionality to an object without changing its code. For example, let’s say you have a function that calculates the area of a triangle. You might want to use this function to calculate the area of other shapes too, but don’t know how to do it.</p><p>One way would be to use inheritance, using a base class for calculating areas and another class inheriting from it for other shapes. Though this is possible, there are cases when you just want to add functionality without modifying the original code. This is where decorators come in handy.</p><p>A decorator derives from the same class as the object being decorated and adds its own functionality by overriding or wrapping other methods. You can then ‘decorate’ any object with this decoration by calling the constructor of your decorator class with the original object as an argument.</p><p>Example of the Decorator Pattern in CodeThe following example demonstrates how the decorator pattern can be used.</p><p>public class Car { public void Drive() { Console.WriteLine(“Car is driving”); } }</p><p>public class SportsCar : Car { public override void Drive() { Console.WriteLine(“Sports car is driving”); } }</p><p>public class Limousine : Car { public override void Drive() { Console.WriteLine(“Limousine is driving”); } }</p><p>public class Van : Car { public override void Drive() { Console.WriteLine(“Van is driving”); } }</p><p>var cars = new List</p><p>ConclusionThe decorator pattern is a powerful software design pattern that allows you to add functionality to an existing class without having to subclass the original class and create a new instance.</p><p>The power of this pattern lies in the fact that you can extend an existing object and add additional functionality without changing the original code.</p><p>It’s a simple and elegant solution that can save time and effort, while still achieving your desired result.</p><p>So, next time you need to add functionality to an existing object, why not consider the decorator pattern?</p>",
            "url": "https://programerat.github.io/2021/12/modelet-e-strukturimit-te-kodit-modeli-dekorues",
            
            
            
            "tags": ["Design","Patterns","Decorator"],
            
            "date_published": "2021-12-31T09:15:20+01:00",
            "date_modified": "2021-12-31T09:15:20+01:00",
            
                "author": "diarselimi"
            
        },
    
        {
            "id": "https://programerat.github.io/2021/12/command-pattern-modeli-komande",
            "title": "Modelet e strukturimit të kodit, modeli komandë (eng. Command Pattern)",
            "summary": "Modelet e strukturimit të kodit, Modeli Komandë",
            "content_text": "  Njihet edhe si Veprim (eng. Action), Transakcion (eng. Transaction)Modeli Komandë përmbanë të gjitha parametrat e nevojshme për veprimin i cili do të bëhet në një komandë. Prandaj, kjo na lejon që komanda të ekzekutohet  në mënyra të ndryshme.Perparësitë e modelit komandë:  E bën ndarjen e klasës që fillon procesin prej klasës që e kryen punën.  Lejon që të bëjmë një grup të komandave të njëpasnjëshme duke na e mundësuar një sistem rradhë pritje (eng. Queue System).  Zgjerimi  është i lehtë, mund të bëhet pa u ndryshuar kodi ekzistues.  Mund të definohet sistemi për fshirjen e ndryshimeve (eng. Rollback).Konteksti se ku do ta aplikojmë modelinTa zëmë  që jemi në një shitore online, dhe dëshirojmë ta bëjmë një blerje. Zgjedhim produktin e fusim në kosh dhe klikojmë në butonin Bli. Kjo na drejton në një dritare për të mbushur të dhënat bankare dhe të konfirmojmë blerjen.Shembulli konkret i aplikuar në kodKodi në një MVC kornizë pune (eng. framework) sikur  symfony  do të dukej si në vijim.class CreateOrderController {        public function execute(Request $request) {        $this-&gt;validate($request); //validimi i kërkesës do të bëhet në controller        $order = $this-&gt;createOrder($request);        if ($this-&gt;shouldBeApproved($order)) {            $this-&gt;approve($order);        }        $this-&gt;orderRepository-&gt;create($order);        $this-&gt;integrationBus-&gt;send($order); //njofton sistemet tjera që një blerje është bërë     }}Nëse punojmë me një kornizë të punës (eng. Framework) MVC dhe nuk përdorim ndonjë organizim të kodit atëherë nuk do të kemi ndarje aty ku bëhet thirrja e serviseve dhe ku kryhet puna, andaj e gjithë logjika do të vendoset në një klasë të vetme. Prandaj edhe shtimi i logjikës të re ose ndryshimeve nuk do të jetë shumë i lehtë.Ndryshimi se si do të ekzekutohet  logjika në këtë rast, do të ishte shumë e vështirë.Gjithashtu nëse dëshirojmë ta shtojmë një mekanizëm për kthimin e ekzekutimit që mos të ruajmë të dhënat të përgjysmuara atëherë duhet ti ndryshojmë të gjithë  kontrollerët.UML Diagrami i modelit KomandëKlasa që thërret (eng. Invoke) komandat e di  se cilën metodë dhe cilat parametra ti ekzekutojë, por nuk ka dijeni se çka bën ajo metodë.P.SH: Nëse e dërgon veturën tek miku yt mekanik, ai nuk mund të bëj asgjë nëse nuk i tregon se çfarë dëshiron ti.$mechanic = new Mechanic();$mechanic-&gt;replaceWheels('type', 'size', 'model');Implementimi i modelit komandëNë shembullin e ardshëm do ta shihni që nëse një kërkesë vjen që ta krijojmë një blerje.class CreateOrderCommand implements Command {        private CreateOrderHandler $receiver;    public function __construct(Receiver $receiver)    {        $this-&gt;receiver = $receiver;    }    //komanda e njeh pranuesin por nuk ka dijeni se cka ben ai.    public function execute(): void    {        $this-&gt;receiver            -&gt;checkMoneyLimit($this-&gt;totalAmount())            -&gt;identifyCompany($this-&gt;getComapany())            -&gt;checkRisk($this-&gt;getCustomer())            -&gt;authorizeOrder($this-&gt;getOrder())        ;    }}//në rastin e mekanikut kjo klasë do ta luaj rolin e ndërmjetsuesit në mes teje dhe mekanikut.class CreateOrderInvoker {    private array $commands = [];    public function addCommand(Command $command)    {        $this-&gt;commands[] = $command;    }    public function execute(): void    {        foreach ($this-&gt;commands as $command) {            $command-&gt;execute();        }        $this-&gt;dispatchIntegrationMessages();     }//kjo i dërgon mesazhet për të njoftuar sistemet tjera që një blerje është bërë.    private function dispatchIntegrationMessages(): void     {        $this-&gt;bus-&gt;dispatch(new OrderCreated($order));    }}//kontrolleri do te duket si ne vijim.class CreateOrderController {    private CreateOrderHandler $createOrderHandler;    private CreateOrderInvoker $invoker;    public function __construct(CreateOrderHandler $createOrderHandler, CreateOrderInvoker $invoker)    {        $this-&gt;createOrderHandler = $createOrderHandler;        $this-&gt;invoker = $invoker;    }    public function execute(Request $request)    {        $command = new CreateOrderCommand($this-&gt;createOrderHandler, $request);                $this-&gt;invoker        -&gt;addCommand($command)        -&gt;execute();        //ose        //-&gt;addCommand($createOrderCommand)        //-&gt;addCommand($confirmOrderCommand)        //-&gt;queue();    }}Siç shihet në shembull,  komandat mund të shtohen njëra pas tjetrës. , Mënyra se si do të ekzekutohen  ato mund të përmbaj logjikë specifike dhe nëse diçka shkon gabim atëherë mund të vendoset një mekanizëm që i kthen ndryshimet e prezentuara  (eng. Rollback).Nëse duam  të shtojmë komanda të reja atëherë nuk ka nevojë që ta ndryshojmë kodin ekzistues, gjë që i mbështetë principet solid.Vështiresit që ka ky modelShumë klasa duhet të inkuadrohen në procese që të kryhet një komandë, andaj edhe duhet të punohet me kujdes të shtuar duke menduar mirë se çfarë klasa shtohen. Sygjeroj që nëse përdorni DDD (eng. Domain Driven Design) atëherë ky model do të jetë më natyral në projektin tuaj.Sugjerohet  në disa libra që edhe komanda prej kërkesës (eng. Query) të jetë e ndarë. Komanda nuk duhet të kthej rezultat ndërsa kërkesa është që të kthej rezultat. Ky term është propozuar nga autori   Bertrand Meyer në librin e tij.  “Secili mundet me shkru kod që kompjuteri e kupton. Programerat e mirë shkruajnë kod që të tjerët e kutojnë.” – Martin Fowler",
            "content_html": "<blockquote>  <p>Njihet edhe si Veprim (eng. Action), Transakcion (eng. Transaction)</p></blockquote><p>Modeli Komandë përmbanë të gjitha parametrat e nevojshme për veprimin i cili do të bëhet në një komandë. Prandaj, kjo na lejon që komanda të ekzekutohet  në mënyra të ndryshme.</p><p>Perparësitë e modelit komandë:</p><ol>  <li>E bën ndarjen e klasës që fillon procesin prej klasës që e kryen punën.</li>  <li>Lejon që të bëjmë një grup të komandave të njëpasnjëshme duke na e mundësuar një sistem rradhë pritje (eng. Queue System).</li>  <li>Zgjerimi  është i lehtë, mund të bëhet pa u ndryshuar kodi ekzistues.</li>  <li>Mund të definohet sistemi për fshirjen e ndryshimeve (eng. Rollback).</li></ol><h3 id=\"konteksti-se-ku-do-ta-aplikojmë-modelin\">Konteksti se ku do ta aplikojmë modelin</h3><p>Ta zëmë  që jemi në një shitore online, dhe dëshirojmë ta bëjmë një blerje. Zgjedhim produktin e fusim në kosh dhe klikojmë në butonin Bli. Kjo na drejton në një dritare për të mbushur të dhënat bankare dhe të konfirmojmë blerjen.</p><h3 id=\"shembulli-konkret-i-aplikuar-në-kod\">Shembulli konkret i aplikuar në kod</h3><p>Kodi në një <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" target=\"_blank\">MVC</a> kornizë pune (<em>eng. framework</em>) sikur <a href=\"https://symfony.com/\" target=\"_blank\"> symfony </a> do të dukej si në vijim.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">CreateOrderController</span> <span class=\"p\">{</span>        <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"kt\">Request</span> <span class=\"nv\">$request</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"nv\">$request</span><span class=\"p\">);</span> <span class=\"c1\">//validimi i kërkesës do të bëhet në controller</span>        <span class=\"nv\">$order</span> <span class=\"o\">=</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">createOrder</span><span class=\"p\">(</span><span class=\"nv\">$request</span><span class=\"p\">);</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">shouldBeApproved</span><span class=\"p\">(</span><span class=\"nv\">$order</span><span class=\"p\">))</span> <span class=\"p\">{</span>            <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">approve</span><span class=\"p\">(</span><span class=\"nv\">$order</span><span class=\"p\">);</span>        <span class=\"p\">}</span>        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">orderRepository</span><span class=\"o\">-&gt;</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"nv\">$order</span><span class=\"p\">);</span>        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">integrationBus</span><span class=\"o\">-&gt;</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"nv\">$order</span><span class=\"p\">);</span> <span class=\"c1\">//njofton sistemet tjera që një blerje është bërë </span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Nëse punojmë me një kornizë të punës (eng. Framework) MVC dhe nuk përdorim ndonjë organizim të kodit atëherë nuk do të kemi ndarje aty ku bëhet thirrja e serviseve dhe ku kryhet puna, andaj e gjithë logjika do të vendoset në një klasë të vetme. Prandaj edhe shtimi i logjikës të re ose ndryshimeve nuk do të jetë shumë i lehtë.</p><p>Ndryshimi se si do të ekzekutohet  logjika në këtë rast, do të ishte shumë e vështirë.<br />Gjithashtu nëse dëshirojmë ta shtojmë një mekanizëm për kthimin e ekzekutimit që mos të ruajmë të dhënat të përgjysmuara atëherë duhet ti ndryshojmë të gjithë  kontrollerët.</p><h3 id=\"uml-diagrami-i-modelit-komandë\">UML Diagrami i modelit Komandë</h3><p><img src=\"/assets/diagrams/TheCommandPattern.png\" alt=\"UML diagrami i modelit komandë\" /></p><p><img src=\"/assets/diagrams/Design_Command_Design_Pattern_UML.jpeg\" alt=\"UML diagrami i modelit komandë i huazuar nga wikipedia.\" /></p><p>Klasa që thërret (eng. Invoke) komandat e di  se cilën metodë dhe cilat parametra ti ekzekutojë, por nuk ka dijeni se çka bën ajo metodë.</p><p>P.SH: Nëse e dërgon veturën tek miku yt mekanik, ai nuk mund të bëj asgjë nëse nuk i tregon se çfarë dëshiron ti.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$mechanic</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Mechanic</span><span class=\"p\">();</span><span class=\"nv\">$mechanic</span><span class=\"o\">-&gt;</span><span class=\"nf\">replaceWheels</span><span class=\"p\">(</span><span class=\"s1\">'type'</span><span class=\"p\">,</span> <span class=\"s1\">'size'</span><span class=\"p\">,</span> <span class=\"s1\">'model'</span><span class=\"p\">);</span></code></pre></div></div><h3 id=\"implementimi-i-modelit-komandë\">Implementimi i modelit komandë</h3><p>Në shembullin e ardshëm do ta shihni që nëse një kërkesë vjen që ta krijojmë një blerje.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">CreateOrderCommand</span> <span class=\"kd\">implements</span> <span class=\"nc\">Command</span> <span class=\"p\">{</span>        <span class=\"k\">private</span> <span class=\"kt\">CreateOrderHandler</span> <span class=\"nv\">$receiver</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__construct</span><span class=\"p\">(</span><span class=\"kt\">Receiver</span> <span class=\"nv\">$receiver</span><span class=\"p\">)</span>    <span class=\"p\">{</span>        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">receiver</span> <span class=\"o\">=</span> <span class=\"nv\">$receiver</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"c1\">//komanda e njeh pranuesin por nuk ka dijeni se cka ben ai.</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">execute</span><span class=\"p\">():</span> <span class=\"kt\">void</span>    <span class=\"p\">{</span>        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">receiver</span>            <span class=\"o\">-&gt;</span><span class=\"nf\">checkMoneyLimit</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">totalAmount</span><span class=\"p\">())</span>            <span class=\"o\">-&gt;</span><span class=\"nf\">identifyCompany</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">getComapany</span><span class=\"p\">())</span>            <span class=\"o\">-&gt;</span><span class=\"nf\">checkRisk</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">getCustomer</span><span class=\"p\">())</span>            <span class=\"o\">-&gt;</span><span class=\"nf\">authorizeOrder</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">getOrder</span><span class=\"p\">())</span>        <span class=\"p\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"c1\">//në rastin e mekanikut kjo klasë do ta luaj rolin e ndërmjetsuesit në mes teje dhe mekanikut.</span><span class=\"kd\">class</span> <span class=\"nc\">CreateOrderInvoker</span> <span class=\"p\">{</span>    <span class=\"k\">private</span> <span class=\"kt\">array</span> <span class=\"nv\">$commands</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">addCommand</span><span class=\"p\">(</span><span class=\"kt\">Command</span> <span class=\"nv\">$command</span><span class=\"p\">)</span>    <span class=\"p\">{</span>        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">commands</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"nv\">$command</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">execute</span><span class=\"p\">():</span> <span class=\"kt\">void</span>    <span class=\"p\">{</span>        <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">commands</span> <span class=\"k\">as</span> <span class=\"nv\">$command</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"nv\">$command</span><span class=\"o\">-&gt;</span><span class=\"nf\">execute</span><span class=\"p\">();</span>        <span class=\"p\">}</span>        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">dispatchIntegrationMessages</span><span class=\"p\">();</span>     <span class=\"p\">}</span><span class=\"c1\">//kjo i dërgon mesazhet për të njoftuar sistemet tjera që një blerje është bërë.</span>    <span class=\"k\">private</span> <span class=\"k\">function</span> <span class=\"n\">dispatchIntegrationMessages</span><span class=\"p\">():</span> <span class=\"kt\">void</span>     <span class=\"p\">{</span>        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">bus</span><span class=\"o\">-&gt;</span><span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nc\">OrderCreated</span><span class=\"p\">(</span><span class=\"nv\">$order</span><span class=\"p\">));</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"c1\">//kontrolleri do te duket si ne vijim.</span><span class=\"kd\">class</span> <span class=\"nc\">CreateOrderController</span> <span class=\"p\">{</span>    <span class=\"k\">private</span> <span class=\"kt\">CreateOrderHandler</span> <span class=\"nv\">$createOrderHandler</span><span class=\"p\">;</span>    <span class=\"k\">private</span> <span class=\"kt\">CreateOrderInvoker</span> <span class=\"nv\">$invoker</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__construct</span><span class=\"p\">(</span><span class=\"kt\">CreateOrderHandler</span> <span class=\"nv\">$createOrderHandler</span><span class=\"p\">,</span> <span class=\"kt\">CreateOrderInvoker</span> <span class=\"nv\">$invoker</span><span class=\"p\">)</span>    <span class=\"p\">{</span>        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">createOrderHandler</span> <span class=\"o\">=</span> <span class=\"nv\">$createOrderHandler</span><span class=\"p\">;</span>        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">invoker</span> <span class=\"o\">=</span> <span class=\"nv\">$invoker</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"kt\">Request</span> <span class=\"nv\">$request</span><span class=\"p\">)</span>    <span class=\"p\">{</span>        <span class=\"nv\">$command</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">CreateOrderCommand</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">createOrderHandler</span><span class=\"p\">,</span> <span class=\"nv\">$request</span><span class=\"p\">);</span>                <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">invoker</span>        <span class=\"o\">-&gt;</span><span class=\"nf\">addCommand</span><span class=\"p\">(</span><span class=\"nv\">$command</span><span class=\"p\">)</span>        <span class=\"o\">-&gt;</span><span class=\"nf\">execute</span><span class=\"p\">();</span>        <span class=\"c1\">//ose</span>        <span class=\"c1\">//-&gt;addCommand($createOrderCommand)</span>        <span class=\"c1\">//-&gt;addCommand($confirmOrderCommand)</span>        <span class=\"c1\">//-&gt;queue();</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Siç shihet në shembull,  komandat mund të shtohen njëra pas tjetrës. , Mënyra se si do të ekzekutohen  ato mund të përmbaj logjikë specifike dhe nëse diçka shkon gabim atëherë mund të vendoset një mekanizëm që i kthen ndryshimet e prezentuara  (eng. Rollback).</p><p>Nëse duam  të shtojmë komanda të reja atëherë nuk ka nevojë që ta ndryshojmë kodin ekzistues, gjë që i mbështetë principet solid.</p><h3 id=\"vështiresit-që-ka-ky-model\">Vështiresit që ka ky model</h3><p>Shumë klasa duhet të inkuadrohen në procese që të kryhet një komandë, andaj edhe duhet të punohet me kujdes të shtuar duke menduar mirë se çfarë klasa shtohen. Sygjeroj që nëse përdorni DDD (eng. Domain Driven Design) atëherë ky model do të jetë më natyral në projektin tuaj.</p><p>Sugjerohet  në disa libra që edhe komanda prej kërkesës (eng. Query) të jetë e ndarë. Komanda nuk duhet të kthej rezultat ndërsa kërkesa është që të kthej rezultat. Ky term është propozuar nga autori  <a href=\"https://www.amazon.com/gp/product/0136291554/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0136291554&amp;linkCode=as2&amp;tag=martinfowlerc-20\" target=\"_blank\"> Bertrand Meyer në librin e tij</a>.</p><blockquote>  <p>“Secili mundet me shkru kod që kompjuteri e kupton. Programerat e mirë shkruajnë kod që të tjerët e kutojnë.” – Martin Fowler</p></blockquote>",
            "url": "https://programerat.github.io/2021/12/command-pattern-modeli-komande",
            
            
            
            "tags": ["Design","Patterns","Command"],
            
            "date_published": "2021-12-31T09:15:20+01:00",
            "date_modified": "2021-12-31T09:15:20+01:00",
            
                "author": "diarselimi"
            
        },
    
        {
            "id": "https://programerat.github.io/2021/12/dp-chain-of-responsibility",
            "title": "Paternet e dizajnimit - Paterni Strategji",
            "summary": "Paterni strategji bën pjesë në kategorinë e kontrollit të sjelljes së objekteve duke mundësuar më shumë fleksibilitet në komunikimin në mes objekteve.",
            "content_text": "Chain of ResponsibilityGjithashtu njihet si: CoR, Chain of CommandPErshkrimi ShembulliPrincipet qe supportonNje tip rreth programmmingShembull konkret nga jeta realeNjë veçori e reNjë shembull se si nuk duhet të zbatohet.UML Modeli i strategjiseImplementimi korrent i dizajnitMbyllja",
            "content_html": "<h3 id=\"chain-of-responsibility\">Chain of Responsibility</h3><p>Gjithashtu njihet si: CoR, Chain of Command</p><p>PErshkrimi Shembulli</p><p>Principet qe supporton</p><p>Nje tip rreth programmming</p><h3 id=\"shembull-konkret-nga-jeta-reale\">Shembull konkret nga jeta reale</h3><h3 id=\"një-veçori-e-re\">Një veçori e re</h3><h3 id=\"një-shembull-se-si-nuk-duhet-të-zbatohet\">Një shembull se si nuk duhet të zbatohet.</h3><h3 id=\"uml-modeli-i-strategjise\">UML Modeli i strategjise</h3><h3 id=\"implementimi-korrent-i-dizajnit\">Implementimi korrent i dizajnit</h3><h3 id=\"mbyllja\">Mbyllja</h3>",
            "url": "https://programerat.github.io/2021/12/dp-chain-of-responsibility",
            
            
            
            "tags": ["OO,","Design","Patterns,","PHP"],
            
            "date_published": "2021-12-13T18:35:00+01:00",
            "date_modified": "2021-12-13T18:35:00+01:00",
            
                "author": "Diar Selimi"
            
        },
    
        {
            "id": "https://programerat.github.io/2021/12/modelet-e-dizajnimit-strategjia",
            "title": "Paternet e dizajnimit - Paterni Strategji",
            "summary": "Paterni strategji bën pjesë në kategorinë e kontrollit të sjelljes së objekteve duke mundësuar më shumë fleksibilitet në komunikimin në mes objekteve.",
            "content_text": "Paterni strategji mundësonë që ti izolojmë algoritmet në klasa të ndryshme, dhe mundëson zëvendesimin e algoritmeve pa pasur nevojë qe kodi të ndryshohet. Pra paterni strategji na mundësonë që të shtojmë klasa të tjera që implementojnë algoritme të ndryshme por janë të tipit të njëjtë. Gjithashtu kjo e mbështetë  principin e parë  Hapur për zgjerim e mbyllur për ndryshime. E mbështetë  edhe principin e pestë në SOLID ku gjithçka varet në kontratë dhe jo në zbatim. Prandaj ky patern na mundësonë që të kemi shumë zbatime të bazuara  në një kontratë.   Mos harroni KISS para çdo gjëje tjetër.Shembull konkret nga jeta realeNëse për shembull duam të udhëtojmë nga qyteti  A në qytetin B, ne duhet ta dimë se si të arrijmë më shpejtë në destinacion. Supozojmë që ne e  kemi ndërtuar një aplikacion i cili e llogaritë rrugën më të shpejtë me makinë.Implementimi në kod do të duket si më poshtë:Një veçori e reTani na kërkohet të shtojmë një mënyrë të re transporti. Si do të shtonim një mënyrë të re transporti pa shkelur rregullat SOLID?Një shembull se si nuk duhet të zbatohet.Në shembullin e mëposhtëm shohim se si rregulli i parë i principeve SOLID është thyer, Principi i një përgjegjësie. Gjithashtu thyen principin e dytë e mbyllur për ndryshime, nëse metoda e njërit prej transporteve ndryshon atëhere edhe  kjo klasë duhet të ndryshojë.Kjo klasë,  në jetën reale do të ishte klasa më e madhe në projekt  nëse do të punonim në një aplikacion si në shembullin më lartë.UML Modeli i strategjiseNë diagram e shohim se e kemi një kontratë Transport, pastaj, çdo klasë me zbatime të ndryshme në bazë të kontratës. Klientit nuk i intereson sesi zbatohet algoritmi sepse ai varet në kontratë dhe kjo e mbështetë principin e pestë  Inversionin i varësisë.Implementimi korrent i dizajnitPjesa me switch mund të bartet në një factory ku në bazë të inputit e krijon klasën specifike. P.SHKëtë pjesë mund ta shpjegoj kur të shkruaj për paternin Factory më në detaje.MbylljaGjithmonë kur shkruajmë kod duhet të përpiqemi të lidhim problemin me jetën e përditshme, nëse nuk është e mundur me biznesin.Zbatimi i principeve dhe modeleve bëhet më i lehtë kur e kuptoni problemin. Për të parë nëse e kuptoni problemin atëherë  provoni t’ia shpjegoni dikujt ose përdorni metodën Rubber Duck.   Siç thotë shprehja, nëse mund t’ia shpjegoni dikujt me fjalë të thjeshta, atëherë e kuptoni problemin.  Rubber duck është një metodë shumë e popullarizuar që programuesit e përdorin sepse shpesh nuk kemi pyetje pasi që mendojmë se gjithçka është e qartë, ndërsa nëse përpiqemi ta shpjegojmë atë atëherë e shohim që nuk e kemi kuptuar në të vërtetë.Në vazhdim do të postoj për modele të tjera por edhe për metoda të ndryshme që përdorin programuesit. Kodim të këndshëm. &lt;3 &lt;/&gt;",
            "content_html": "<p>Paterni strategji mundësonë që ti izolojmë algoritmet në klasa të ndryshme, dhe mundëson zëvendesimin e algoritmeve pa pasur nevojë qe kodi të ndryshohet. Pra paterni strategji na mundësonë që të shtojmë klasa të tjera që implementojnë algoritme të ndryshme por janë të tipit të njëjtë.<br /> </p><p>Gjithashtu kjo e mbështetë  principin e parë <a href=\"https://programerat.github.io/2021/SOLID-principet-dhe-si-ti-aplikoni-ne-kod/#Principi%20i%20dytë%20-%20E%20hapur%20për%20zgjatje,%20e%20mbyllur%20për%20ndryshime.\"> Hapur për zgjerim e mbyllur për ndryshime.</a> E mbështetë  edhe principin e pestë në SOLID ku gjithçka varet në kontratë dhe jo në zbatim. Prandaj ky patern na mundësonë që të kemi shumë zbatime të bazuara  në një kontratë.<br /> </p><blockquote>  <p>Mos harroni <a href=\"https://en.wikipedia.org/wiki/KISS_principle\">KISS</a> para çdo gjëje tjetër.</p></blockquote><h3 id=\"shembull-konkret-nga-jeta-reale\">Shembull konkret nga jeta reale</h3><p>Nëse për shembull duam të udhëtojmë nga qyteti  A në qytetin B, ne duhet ta dimë se si të arrijmë më shpejtë në destinacion. Supozojmë që ne e  kemi ndërtuar një aplikacion i cili e llogaritë rrugën më të shpejtë me makinë.</p><p>Implementimi në kod do të duket si më poshtë:<script src=\"https://gist.github.com/Diarselimi/bfd539de510e269233dee8cdf5987403.js\"></script></p><h3 id=\"një-veçori-e-re\">Një veçori e re</h3><p>Tani na kërkohet të shtojmë një mënyrë të re transporti. Si do të shtonim një mënyrë të re transporti pa shkelur rregullat SOLID?</p><h3 id=\"një-shembull-se-si-nuk-duhet-të-zbatohet\">Një shembull se si nuk duhet të zbatohet.</h3><p>Në shembullin e mëposhtëm shohim se si rregulli i parë i principeve SOLID është thyer, <a href=\"https://programerat.github.io/2021/SOLID-principet-dhe-si-ti-aplikoni-ne-kod/#Principi%20i%20par%C3%AB%20-%20Nj%C3%AB%20klas%C3%AB,%20nj%C3%AB%20p%C3%ABrgjegj%C3%ABsi\">Principi i një përgjegjësie</a>. <a href=\"https://programerat.github.io/2021/SOLID-principet-dhe-si-ti-aplikoni-ne-kod/#Principi%20i%20dyt%C3%AB%20-%20E%20hapur%20p%C3%ABr%20zgjatje,%20e%20mbyllur%20p%C3%ABr%20ndryshime.\">Gjithashtu thyen principin e dytë e mbyllur për ndryshime</a>, nëse metoda e njërit prej transporteve ndryshon atëhere edhe  kjo klasë duhet të ndryshojë.<script src=\"https://gist.github.com/Diarselimi/ab34e500d821307baf0bf48827f92039.js\"></script>Kjo klasë,  në jetën reale do të ishte klasa më e madhe në projekt  nëse do të punonim në një aplikacion si në shembullin më lartë.</p><h3 id=\"uml-modeli-i-strategjise\">UML Modeli i strategjise</h3><p><img src=\"/assets/diagrams/transporti.png\" alt=\"uml diagrami\" />Në diagram e shohim se e kemi një kontratë <code class=\"language-plaintext highlighter-rouge\">Transport</code>, pastaj, çdo klasë me zbatime të ndryshme në bazë të kontratës. Klientit nuk i intereson sesi zbatohet algoritmi sepse ai varet në kontratë dhe kjo e mbështetë principin e pestë <a href=\"https://programerat.github.io/2021/SOLID-principet-dhe-si-ti-aplikoni-ne-kod/#Principi%20i%20pest%C3%AB%20-%20Inversioni%20i%20var%C3%ABsis%C3%AB\"> Inversionin i varësisë</a>.</p><h3 id=\"implementimi-korrent-i-dizajnit\">Implementimi korrent i dizajnit</h3><script src=\"https://gist.github.com/Diarselimi/d5eafb20f04cea71f0fe7b28b81d8b67.js\"></script><p>Pjesa me <code class=\"language-plaintext highlighter-rouge\">switch</code> mund të bartet në një factory ku në bazë të inputit e krijon klasën specifike. P.SH<script src=\"https://gist.github.com/Diarselimi/a3191d3e3b6ff9bf3ba3e31331bf15e5.js\"></script>Këtë pjesë mund ta shpjegoj kur të shkruaj për paternin Factory më në detaje.</p><h3 id=\"mbyllja\">Mbyllja</h3><p>Gjithmonë kur shkruajmë kod duhet të përpiqemi të lidhim problemin me jetën e përditshme, nëse nuk është e mundur me biznesin.Zbatimi i principeve dhe modeleve bëhet më i lehtë kur e kuptoni problemin. Për të parë nëse e kuptoni problemin atëherë  provoni t’ia shpjegoni dikujt ose përdorni metodën <a href=\"https://en.wikipedia.org/wiki/Rubber_duck_debugging\">Rubber Duck.</a> </p><blockquote>  <p>Siç thotë shprehja, nëse mund t’ia shpjegoni dikujt me fjalë të thjeshta, atëherë e kuptoni problemin.</p></blockquote><p>  </p><p>Rubber duck është një metodë shumë e popullarizuar që programuesit e përdorin sepse shpesh nuk kemi pyetje pasi që mendojmë se gjithçka është e qartë, ndërsa nëse përpiqemi ta shpjegojmë atë atëherë e shohim që nuk e kemi kuptuar në të vërtetë.<br />Në vazhdim do të postoj për modele të tjera por edhe për metoda të ndryshme që përdorin programuesit.<br /> </p><p>Kodim të këndshëm. <code class=\"language-plaintext highlighter-rouge\">&lt;3 &lt;/&gt;</code></p>",
            "url": "https://programerat.github.io/2021/12/modelet-e-dizajnimit-strategjia",
            
            
            
            "tags": ["OO","Design","Patterns","PHP"],
            
            "date_published": "2021-12-13T18:35:00+01:00",
            "date_modified": "2021-12-13T18:35:00+01:00",
            
                "author": "Diar Selimi"
            
        },
    
        {
            "id": "https://programerat.github.io/2021/11/solid-principet-dhe-si-ti-aplikoni-ne-kod",
            "title": "Principet S.O.L.I.D dhe si të aplikojmë ato në kod",
            "summary": "Krijoni një bazë të fortë në programim duke mësuar SOLID principet.",
            "content_text": "E pyeta një të afërm timin pse duhet ti mësojmë SOLID principet?Ja si përgjigjet ai…  Dallimi në mes amaterëve dhe profesinistëve që kërkohen nga cdo kompani, perfshir: Tesla, Google, Apple, SpaceX etj gjendet tek aplikimi i principeve të ndryshme.Pasi të lexoni këtë artikull, si dhe të analizoni shembujt që janë në këtë artikull, ju do të kuptoni principet SOLID dhe do të jeni të gatshëm ti aplikoni ato.Çdo kompani në Gjermani që do të aplikoni si zhvillues softveri, do të ju parashtrojn pytje në intervistë në lidhje me principet SOLID.Principet SOLID në OO programim do të ndihmojnë shumë në karrierën tuaj si programer.Do të kesh një bazë stabile për të ecur përpara, pa pasur parasysh produktin që ti e ndërton.Prezantimi i problemitPara se të fillojm, do ta prezantoj problemin që do të punoj gjatë të gjithë shembujve që i marr.ProblemiTë marrim shembull një klient i juaj do të ju kërkoj me zhvillu një aplikacion. Ky aplikacion do ti digjitalizoj porosit në restaurantin e tij Villa Natyra që vetëm bën piza dhe hamburgera.Ne si programera të mirë që jem ja ndërtojm aplikacionin, tash ai po e përdor dhe është i kënaqur.Në rregull, masi e kem ndërtu produktin tash hajde të flasim për principet.Principi i parë - Një klasë, një përgjegjësi  Një klasë duhet të këtë vetëm një përgjegjësi dhe një arsyje të ndryshoj.Një shembull ku ky princip nuk respektohetclass Hamburgeri{   private string $kategoria;   private array $shtesat;   private string $llojiIMishit;    public function __constructor(string $llojiIMishit, array $shtesat)   {       $this-&gt;kategoria = $this-&gt;percaktoKategorine($llojiIMishit);       $this-&gt;shtesat = $shtesat;       $this-&gt;llojiIMishit = $llojiIMishit;   }    private function përcaktoKategorine(string $llojiIMishit): string   {       if (in_array($llojiIMishit, ['file_pule', 'mish_lope'])) {           return 'zgare';       }        return 'furre';   }    public function llogaritShumen(): double   {       double $shuma = 0;       foreach($this-&gt;shtesat as $shtesa) {           $shuma += $shtesa-&gt;merrQmimin();       }        return $this-&gt;llojiIMishit + $shuma;   }    public function ruajFakturen(): void   {       //ktu ruhet faktura në databazë   }}Nëse e kemi një klasë vetëm për hamburgerin edhe kjo klasë pranon shtesa sikur sallatë, domate etj.Gjithashtu e përcaktojmë kategorinë mbrenda klasës, i ruajm të dhënat në databazë dhe e kalkulojmë shumën.Atëher kjo klasë do të ndryshoj sa herë që mënyra e ruajtjës në databazë ose mënyra e kalkulimit ose mënyra e përcaktimit të kategorise ndryshojnë.interface Ushqim {} class Hamburgeri implements Ushqim{   private const KATEGORIA = 'furre';   public array $shtesat;   public string $llojiIMishit;   public double $shuma;    public function __constructor(string $llojiIMishit, array $shtesat)   {       $this-&gt;kategoria = $this-&gt;percaktoKategorine($llojiIMishit);       $this-&gt;shtesat = $shtesat;       $this-&gt;llojiIMishit = $llojiIMishit;   }    public function merrKategorine(): string   {       return self::KATEGORIA;   }} class KalkulatoriUshqimit{   public function __constructor(Ushqim $ushqimi){}    public function merrShumen(): double   {       return 0.0; //ktu  kalkulohet shuma.   }} class RuajtjaFaktures{   public function ruaj(Faktura $faktura): void   {       $this-&gt;save($faktura);   }} class Faktura{   public function __constructor(Ushqim $ushqimi, double $shuma)}Kurse këtu siç edhe shihet që i kemi ndarë klasat me përgjegjësi të ndryshme, sa herë që kalkulimi i çmimit ndryshon atëher klasa KalkulatoriUshqimit po ashtu ndryshon. Nëse vendosim ta ndrrojmë mënyrën se si i ruajmë të dhënat atëher klasa RuajtjaFaktures ndryshon.Principi i dytë - E hapur për zgjatje, e mbyllur për ndryshime.  Një klasë duhet të jete e mbyllur për ndryshime ndërsa e hapur për zgjatje.Ta marrim shembull klasën që i bën kalkulimet KalkulatoriUshqimit dhe ta shohim si do të ndryshoj nëse një kërkes e re na vjen, shembull “Po me duhet që për studente çmimi final të dal 20% më lirë”Tash na si programera pa dijeni për këtë princip “E mbyllur për ndryshime” do ta bëjme një ndryshim si në vijiminterface Ushqim {} class KalkulatoriUshqimit{   public function merrShumen(Ushqim $ushqim): double   {       $shuma = $ushqimi-&gt;merrLlojinEMishit()-&gt;merrShumen();       foreach($ushqimi-&gt;merrShtesat() as $shtesa) {           $shuma += $shtesa-&gt;merrShumen();       }        return $shuma;   }    public function merrShumenPerStudente(Ushqim $ushqim): double   {       $shuma = $this-&gt;merrShumen($ushqim);        return $shuma - ($shuma * 0.2);   } }Nëse bëjme diçka si kjo atëher së pari klasa ka jo një arsye por dy për të ndryshuar, që e then edhe principin e parë, shohim që po e kalkulon shumën e ushqimit dhe zbritjen për studenta. Tash nëse ndryshon mënyra e kalkulimit të ushqimit ose përqindja për studenta, atëher kjo klasë duhet të modifikohet.Nëse e konsiderojm Principin e parë, zbritja duhet të jete në një klas ndamas dhe në bazë të principit të dytë, klasa e re mund ta përdor klasën që kalkulon por nuk duhet ta ndryshoj atë.Si rezultat kemi bërë një ndryshim si në vijim.interface Ushqim {} class KalkulatoriUshqimit{   public function merrShumen(Ushqim $ushqim): double   {       $shuma = $ushqimi-&gt;merrLlojinEMishit()-&gt;merrShumen();       foreach($ushqimi-&gt;merrShtesat() as $shtesa) {           $shuma += $shtesa-&gt;merrShumen();       }        return $shuma;   } } class KalkulatoriUshqimitPerStudente extends KalkulatoriUshqimit{   private const ZBRITJE_NE_PERQINDJE = 0.2;    public function merrShumen(Ushqim $ushqimi): double   {       return $this-&gt;zbritShumen(parent::merrShumen($ushqimi));   }    private function zbritShumen(double $shuma): double   {       return $shuma - ($shuma * self::ZBRITJE_NE_PERQINDJE);   } }Siç edhe pe shihni i kemi ndarë përgjegjsit në klasa të ndryshme, tash nëse mënyra e kalkulimit të ushqimit ndryshon atëher do të ndryshoj vetem KalkulatoriUshqimit dhe nëse zbritja për student ndryshon atëher do të ndryshoj vetëm klasa KalkulatoriUshqimitPerStudente.Principi i tretë - Zëvendesimi Liskov  Ky princip thot që nëse funksioni f(x) punon me objektet e tipit T. Atëher funksioni f(y) duhet të punoj me objektet y të tipit S ku S është nën tip i T.Ndoshta shembulli që e then këtë princip do ta lehtsoj kuptimin e ketij principi.interface Ushqim {} class KalkulatoriUshqimit{   public function merrShumen(Ushqim $ushqim): double   {       $shuma = $ushqimi-&gt;merrLlojinEMishit()-&gt;merrShumen();       foreach($ushqimi-&gt;merrShtesat() as $shtesa) {           $shuma += $shtesa-&gt;merrShumen();       }        return $shuma;   } } class KalkulatoriUshqimitPerStudente extends KalkulatoriUshqimit{   private const ZBRITJE_NE_PERQINDJE = 0.2;    public function merrShumen(Ushqim $ushqimi): double   {       return $this-&gt;zbritShumen(parent::merrShumen($ushqimi));   }    private function zbritShumen(double $shuma): double   {       return $shuma - ($shuma * self::ZBRITJE_NE_PERQINDJE);   } }Kjo pjese e kodit është pjesë e principit të dytë ku e kem zgjatur klasën KalkulatoriUshqimit, me këtë ndryshim të metodës merrShumen e kemi thyer rregullin e principit të tretë.Nëse i referohemi definicionit i bjen që e njëjta metodë nuk duhet të kthen vlera të ndryshme edhe pse është klasë tjeter.Do ta rregullojme këtë klasë si në vijim.interface Ushqim {} class KalkulatoriUshqimit{   public function merrShumen(Ushqim $ushqim): double   {       $shuma = $ushqimi-&gt;merrLlojinEMishit()-&gt;merrShumen();       foreach($ushqimi-&gt;merrShtesat() as $shtesa) {           $shuma += $shtesa-&gt;merrShumen();       }        return $shuma;   } } class KalkulatoriUshqimitPerStudente extends KalkulatoriUshqimit{   private const ZBRITJE_NE_PERQINDJE = 0.2;    public function merrShumenEZbritur(): double   {       $this-&gt;zbritShumen($this-&gt;merrShumen());   }    private function zbritShumen(double $shuma): double   {       return $shuma - ($shuma * self::ZBRITJE_NE_PERQINDJE);   } }Në vend që ta modifikojm metodën e klasës origjinale, do ta përdorim atë në klasën për studente dhe do të shtojmë metoda në klasën për studente.Principi i katert - Ndarja e kontratave  Një klasë nuk duhet ta implementoj një metodë që nuk i nëvojitet.Shembull shtesat e ushqimeve, siq e kemi parë me lartë secila shtesë e ka çmimin e vet, po çka nëse kemi shtesa që nuk kushtojn?Shembull:interface Ushqim {}interface Shtesa {   public function merrShumen(): double;} class Sallate implements Shtesa {   public const QMIMI = 0.50;    public function merrShumen() {       return self::QMIMI;   }} class BbqSos implements Shtesa {   public const QMIMI = 0.20;    public function merrShumen() {       return self::QMIMI;   }} class Ketchup implements Shtesa {   public const QMIMI = 0.00;    public function merrShumen() {       return self::QMIMI;   }} class Hamburger implements Ushqim {   private const QMIMI = 2.00;    public function merrQmimin():double   {       return self::QMIMI;   }}Siç e shohim në shembullin më lart, shtesa  Ketchup edhe pse është falas  duhet ta implementoj metodën merrShumen dhe kjo nuk e respekton principin e katërt, një klasë nuk duhet ta implementoj një metodë që nuk i nevojitet.Kështu duhet  ta ndryshojm kodin që ta respektojme principin e katërt.interface Ushqim {}interface Shtesa {   public function merrSasine(): int;}interface ShtesaMePages implements Shtesa {   public function merrShumen(): double;} class Sallate implements ShtesaMePages {   public const QMIMI = 0.50;    public function merrShumen() {       return self::QMIMI;   }} class Ketchup implements Shtesa {   private int $sasia = 1;    public function merrSasine(): int   {       return $this-&gt;sasia;   }} class Hamburger implements Ushqim {   private const QMIMI = 2.00;    public function merrQmimin():double   {       return self::QMIMI;   }} class KalkulatoriUshqimit{   public function merrShumen(Ushqim $ushqim): double   {       $shuma = $ushqimi-&gt;merrLlojinEMishit()-&gt;merrShumen();       foreach($ushqimi-&gt;merrShtesat() as $shtesa) {           if ($shtesa instanceof ShtesaMePages) {               $shuma += $shtesa-&gt;merrShumen();             }       }        return $shuma;   } }Ky është një shembull ku ndahet kontrata për shtesat me  çmime dhe ato pa  çmime, për arsye që shtesat pa çmime nuk kan nevoj ta implementojnë metodën merrQmimin().Principi i pestë - Inversioni i varësisë  Një klasë që kryen një punë asnjëherë nuk duhet të varet në mjetin që e përdor por në kontratë.Një shembull do të ishte ta ruajm fakturen në MySQL databazë si në shembullin në vijim.E mbani mend si klasa RuajtjaFaktures varet direkt në klasën Databaza që është edhe implementimi mbrenda.Tani klasa RuajtjaFaktures e then principin e parë sepse nëse e ndryshojme databazën  atëher duhet ta ndryshojm edhe klasën RuajtjaFaktures.class Databaza{   public function ruaj(Faktura $faktura): void   {       $sql = \"INSERT into FAKTURAT (val1, val2, val3) VALUES (1,2,3);\"       $this-&gt;db-&gt;executeSql($sql);   }} class RuajtjaFaktures{   public function __constructor(Databaza $databaza){}    public function ruaj(Faktura $faktura): void   {       $this-&gt;databaza-&gt;ruaj($faktura);   }} class Faktura{   public function __constructor(Ushqim $ushqimi, double $shuma)}Një shembull  që do ta respektonte principin e pestë do të ishte si në vijim.interface Databaza {   public function ruaj(Faktura $faktura): void;} class HapsiraRuajtjesSeFakturave implements Databaza{   public function ruaj(Faktura $faktura): void   {       $sql = \"INSERT into FAKTURAT (val1, val2, val3) VALUES (1,2,3);\"       $this-&gt;db-&gt;executeSql($sql);   }} class RuajtjaFaktures{   public function __constructor(Databaza $databaza){}    public function ruaj(Faktura $faktura): void   {       $this-&gt;databaza-&gt;ruaj($faktura);   }}   class Faktura{   public function __constructor(Ushqim $ushqimi, double $shuma)}Ne këtë shembull e shohim që tani kemi një kontratë Databaza dhe një klasë ku gjendet implementimi i ruajtjes së fakturave HapsiraRuajtjesSeFakturave, tash nëse vendosim ta ndryshojm databazën në MongoDB, NoSQL ose çkado qoft nuk kemi nevoj ta ndryshojm klasën RuajtjaFaktures sepse ajo varet në kontrat e jo në implementim.Finalizimi dhe hapat e tjerëKëto janë pra pesë principet në OO të cilat shikohen në secilën intervistë se sa mirë i ke kuptuar dhe a din si ti përdorni ato.Hapat e radhës janë: Që të provosh ti aplikosh këto principe duhet startuar një projekt të vogël ose edhe në punën ku punon.Kur e shikon një kod në fillim të merr kohe ti shikosh të gjitha principet, por pas ca kohe bëhet më e leht.Përserite këtë proces disa here.Nëse keni ndonjë koment, kritike ose   vetëm don të kemi një bised rreth OO atëher me kontakto në rrjetet sociale.Github",
            "content_html": "<p>E pyeta një të afërm timin pse duhet ti mësojmë SOLID principet?Ja si përgjigjet ai…</p><blockquote>  <p>Dallimi në mes amaterëve dhe profesinistëve që kërkohen nga cdo kompani, perfshir: Tesla, Google, Apple, SpaceX etj gjendet tek aplikimi i principeve të ndryshme.</p></blockquote><p>Pasi të lexoni këtë artikull, si dhe të analizoni shembujt që janë në këtë artikull, ju do të kuptoni principet SOLID dhe do të jeni të gatshëm ti aplikoni ato.</p><p>Çdo kompani në Gjermani që do të aplikoni si zhvillues softveri, do të ju parashtrojn pytje në intervistë në lidhje me principet SOLID.</p><p>Principet SOLID në OO programim do të ndihmojnë shumë në karrierën tuaj si programer.Do të kesh një bazë stabile për të ecur përpara, pa pasur parasysh produktin që ti e ndërton.</p><h3 id=\"prezantimi-i-problemit\">Prezantimi i problemit</h3><p>Para se të fillojm, do ta prezantoj problemin që do të punoj gjatë të gjithë shembujve që i marr.</p><h3 id=\"problemi\">Problemi</h3><p>Të marrim shembull një klient i juaj do të ju kërkoj me zhvillu një aplikacion. Ky aplikacion do ti digjitalizoj porosit në restaurantin e tij <em>Villa Natyra</em> që vetëm bën piza dhe hamburgera.Ne si programera të mirë që jem ja ndërtojm aplikacionin, tash ai po e përdor dhe është i kënaqur.</p><p>Në rregull, masi e kem ndërtu produktin tash hajde të flasim për principet.</p><h3 id=\"principi-i-parë---një-klasë-një-përgjegjësi\">Principi i parë - Një klasë, një përgjegjësi</h3><blockquote>  <p>Një klasë duhet të këtë vetëm një përgjegjësi dhe një arsyje të ndryshoj.</p></blockquote><p>Një shembull ku ky princip nuk respektohet</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Hamburgeri</span><span class=\"p\">{</span>   <span class=\"k\">private</span> <span class=\"kt\">string</span> <span class=\"nv\">$kategoria</span><span class=\"p\">;</span>   <span class=\"k\">private</span> <span class=\"kt\">array</span> <span class=\"nv\">$shtesat</span><span class=\"p\">;</span>   <span class=\"k\">private</span> <span class=\"kt\">string</span> <span class=\"nv\">$llojiIMishit</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__constructor</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"nv\">$llojiIMishit</span><span class=\"p\">,</span> <span class=\"kt\">array</span> <span class=\"nv\">$shtesat</span><span class=\"p\">)</span>   <span class=\"p\">{</span>       <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">kategoria</span> <span class=\"o\">=</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">percaktoKategorine</span><span class=\"p\">(</span><span class=\"nv\">$llojiIMishit</span><span class=\"p\">);</span>       <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">shtesat</span> <span class=\"o\">=</span> <span class=\"nv\">$shtesat</span><span class=\"p\">;</span>       <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">llojiIMishit</span> <span class=\"o\">=</span> <span class=\"nv\">$llojiIMishit</span><span class=\"p\">;</span>   <span class=\"p\">}</span>    <span class=\"k\">private</span> <span class=\"k\">function</span> <span class=\"n\">përcaktoKategorine</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"nv\">$llojiIMishit</span><span class=\"p\">):</span> <span class=\"kt\">string</span>   <span class=\"p\">{</span>       <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">in_array</span><span class=\"p\">(</span><span class=\"nv\">$llojiIMishit</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'file_pule'</span><span class=\"p\">,</span> <span class=\"s1\">'mish_lope'</span><span class=\"p\">]))</span> <span class=\"p\">{</span>           <span class=\"k\">return</span> <span class=\"s1\">'zgare'</span><span class=\"p\">;</span>       <span class=\"p\">}</span>        <span class=\"k\">return</span> <span class=\"s1\">'furre'</span><span class=\"p\">;</span>   <span class=\"p\">}</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">llogaritShumen</span><span class=\"p\">():</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"n\">double</span> <span class=\"nv\">$shuma</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>       <span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">shtesat</span> <span class=\"k\">as</span> <span class=\"nv\">$shtesa</span><span class=\"p\">)</span> <span class=\"p\">{</span>           <span class=\"nv\">$shuma</span> <span class=\"o\">+=</span> <span class=\"nv\">$shtesa</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrQmimin</span><span class=\"p\">();</span>       <span class=\"p\">}</span>        <span class=\"k\">return</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">llojiIMishit</span> <span class=\"o\">+</span> <span class=\"nv\">$shuma</span><span class=\"p\">;</span>   <span class=\"p\">}</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">ruajFakturen</span><span class=\"p\">():</span> <span class=\"kt\">void</span>   <span class=\"p\">{</span>       <span class=\"c1\">//ktu ruhet faktura në databazë</span>   <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Nëse e kemi një klasë vetëm për hamburgerin edhe kjo klasë pranon shtesa sikur sallatë, domate etj.Gjithashtu e përcaktojmë kategorinë mbrenda klasës, i ruajm të dhënat në databazë dhe e kalkulojmë shumën.Atëher kjo klasë do të ndryshoj sa herë që mënyra e ruajtjës në databazë ose mënyra e kalkulimit ose mënyra e përcaktimit të kategorise ndryshojnë.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">Ushqim</span> <span class=\"p\">{}</span> <span class=\"kd\">class</span> <span class=\"nc\">Hamburgeri</span> <span class=\"kd\">implements</span> <span class=\"nc\">Ushqim</span><span class=\"p\">{</span>   <span class=\"k\">private</span> <span class=\"k\">const</span> <span class=\"no\">KATEGORIA</span> <span class=\"o\">=</span> <span class=\"s1\">'furre'</span><span class=\"p\">;</span>   <span class=\"k\">public</span> <span class=\"kt\">array</span> <span class=\"nv\">$shtesat</span><span class=\"p\">;</span>   <span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"nv\">$llojiIMishit</span><span class=\"p\">;</span>   <span class=\"k\">public</span> <span class=\"kt\">double</span> <span class=\"nv\">$shuma</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__constructor</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"nv\">$llojiIMishit</span><span class=\"p\">,</span> <span class=\"kt\">array</span> <span class=\"nv\">$shtesat</span><span class=\"p\">)</span>   <span class=\"p\">{</span>       <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">kategoria</span> <span class=\"o\">=</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">percaktoKategorine</span><span class=\"p\">(</span><span class=\"nv\">$llojiIMishit</span><span class=\"p\">);</span>       <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">shtesat</span> <span class=\"o\">=</span> <span class=\"nv\">$shtesat</span><span class=\"p\">;</span>       <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">llojiIMishit</span> <span class=\"o\">=</span> <span class=\"nv\">$llojiIMishit</span><span class=\"p\">;</span>   <span class=\"p\">}</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrKategorine</span><span class=\"p\">():</span> <span class=\"kt\">string</span>   <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">::</span><span class=\"no\">KATEGORIA</span><span class=\"p\">;</span>   <span class=\"p\">}</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">KalkulatoriUshqimit</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__constructor</span><span class=\"p\">(</span><span class=\"kt\">Ushqim</span> <span class=\"nv\">$ushqimi</span><span class=\"p\">){}</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">():</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"mf\">0.0</span><span class=\"p\">;</span> <span class=\"c1\">//ktu  kalkulohet shuma.</span>   <span class=\"p\">}</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">RuajtjaFaktures</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">ruaj</span><span class=\"p\">(</span><span class=\"kt\">Faktura</span> <span class=\"nv\">$faktura</span><span class=\"p\">):</span> <span class=\"kt\">void</span>   <span class=\"p\">{</span>       <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"nv\">$faktura</span><span class=\"p\">);</span>   <span class=\"p\">}</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">Faktura</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__constructor</span><span class=\"p\">(</span><span class=\"kt\">Ushqim</span> <span class=\"nv\">$ushqimi</span><span class=\"p\">,</span> <span class=\"kt\">double</span> <span class=\"nv\">$shuma</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><p>Kurse këtu siç edhe shihet që i kemi ndarë klasat me përgjegjësi të ndryshme, sa herë që kalkulimi i çmimit ndryshon atëher klasa <code class=\"language-plaintext highlighter-rouge\">KalkulatoriUshqimit</code> po ashtu ndryshon. Nëse vendosim ta ndrrojmë mënyrën se si i ruajmë të dhënat atëher klasa <code class=\"language-plaintext highlighter-rouge\">RuajtjaFaktures</code> ndryshon.</p><h3 id=\"principi-i-dytë---e-hapur-për-zgjatje-e-mbyllur-për-ndryshime\">Principi i dytë - E hapur për zgjatje, e mbyllur për ndryshime.</h3><blockquote>  <p>Një klasë duhet të jete e mbyllur për ndryshime ndërsa e hapur për zgjatje.</p></blockquote><p>Ta marrim shembull klasën që i bën kalkulimet <code class=\"language-plaintext highlighter-rouge\">KalkulatoriUshqimit</code> dhe ta shohim si do të ndryshoj nëse një kërkes e re na vjen, shembull “Po me duhet që për studente çmimi final të dal 20% më lirë”</p><p>Tash na si programera pa dijeni për këtë princip “E mbyllur për ndryshime” do ta bëjme një ndryshim si në vijim</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">Ushqim</span> <span class=\"p\">{}</span> <span class=\"kd\">class</span> <span class=\"nc\">KalkulatoriUshqimit</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">(</span><span class=\"kt\">Ushqim</span> <span class=\"nv\">$ushqim</span><span class=\"p\">):</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"nv\">$shuma</span> <span class=\"o\">=</span> <span class=\"nv\">$ushqimi</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrLlojinEMishit</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShumen</span><span class=\"p\">();</span>       <span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"nv\">$ushqimi</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShtesat</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"nv\">$shtesa</span><span class=\"p\">)</span> <span class=\"p\">{</span>           <span class=\"nv\">$shuma</span> <span class=\"o\">+=</span> <span class=\"nv\">$shtesa</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShumen</span><span class=\"p\">();</span>       <span class=\"p\">}</span>        <span class=\"k\">return</span> <span class=\"nv\">$shuma</span><span class=\"p\">;</span>   <span class=\"p\">}</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumenPerStudente</span><span class=\"p\">(</span><span class=\"kt\">Ushqim</span> <span class=\"nv\">$ushqim</span><span class=\"p\">):</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"nv\">$shuma</span> <span class=\"o\">=</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShumen</span><span class=\"p\">(</span><span class=\"nv\">$ushqim</span><span class=\"p\">);</span>        <span class=\"k\">return</span> <span class=\"nv\">$shuma</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"nv\">$shuma</span> <span class=\"o\">*</span> <span class=\"mf\">0.2</span><span class=\"p\">);</span>   <span class=\"p\">}</span> <span class=\"p\">}</span></code></pre></div></div><p>Nëse bëjme diçka si kjo atëher së pari klasa ka jo një arsye por dy për të ndryshuar, që e then edhe principin e parë, shohim që po e kalkulon shumën e ushqimit dhe zbritjen për studenta. Tash nëse ndryshon mënyra e kalkulimit të ushqimit ose përqindja për studenta, atëher kjo klasë duhet të modifikohet.</p><p>Nëse e konsiderojm Principin e parë, zbritja duhet të jete në një klas ndamas dhe në bazë të principit të dytë, klasa e re mund ta përdor klasën që kalkulon por nuk duhet ta ndryshoj atë.</p><p>Si rezultat kemi bërë një ndryshim si në vijim.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">Ushqim</span> <span class=\"p\">{}</span> <span class=\"kd\">class</span> <span class=\"nc\">KalkulatoriUshqimit</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">(</span><span class=\"kt\">Ushqim</span> <span class=\"nv\">$ushqim</span><span class=\"p\">):</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"nv\">$shuma</span> <span class=\"o\">=</span> <span class=\"nv\">$ushqimi</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrLlojinEMishit</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShumen</span><span class=\"p\">();</span>       <span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"nv\">$ushqimi</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShtesat</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"nv\">$shtesa</span><span class=\"p\">)</span> <span class=\"p\">{</span>           <span class=\"nv\">$shuma</span> <span class=\"o\">+=</span> <span class=\"nv\">$shtesa</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShumen</span><span class=\"p\">();</span>       <span class=\"p\">}</span>        <span class=\"k\">return</span> <span class=\"nv\">$shuma</span><span class=\"p\">;</span>   <span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">KalkulatoriUshqimitPerStudente</span> <span class=\"kd\">extends</span> <span class=\"nc\">KalkulatoriUshqimit</span><span class=\"p\">{</span>   <span class=\"k\">private</span> <span class=\"k\">const</span> <span class=\"no\">ZBRITJE_NE_PERQINDJE</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">(</span><span class=\"kt\">Ushqim</span> <span class=\"nv\">$ushqimi</span><span class=\"p\">):</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">zbritShumen</span><span class=\"p\">(</span><span class=\"k\">parent</span><span class=\"o\">::</span><span class=\"nf\">merrShumen</span><span class=\"p\">(</span><span class=\"nv\">$ushqimi</span><span class=\"p\">));</span>   <span class=\"p\">}</span>    <span class=\"k\">private</span> <span class=\"k\">function</span> <span class=\"n\">zbritShumen</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"nv\">$shuma</span><span class=\"p\">):</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"nv\">$shuma</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"nv\">$shuma</span> <span class=\"o\">*</span> <span class=\"k\">self</span><span class=\"o\">::</span><span class=\"no\">ZBRITJE_NE_PERQINDJE</span><span class=\"p\">);</span>   <span class=\"p\">}</span> <span class=\"p\">}</span></code></pre></div></div><p>Siç edhe pe shihni i kemi ndarë përgjegjsit në klasa të ndryshme, tash nëse mënyra e kalkulimit të ushqimit ndryshon atëher do të ndryshoj vetem <code class=\"language-plaintext highlighter-rouge\">KalkulatoriUshqimit</code> dhe nëse zbritja për student ndryshon atëher do të ndryshoj vetëm klasa <code class=\"language-plaintext highlighter-rouge\">KalkulatoriUshqimitPerStudente</code>.</p><h3 id=\"principi-i-tretë---zëvendesimi-liskov\">Principi i tretë - Zëvendesimi Liskov</h3><blockquote>  <p>Ky princip thot që nëse funksioni f(x) punon me objektet e tipit T. Atëher funksioni f(y) duhet të punoj me objektet y të tipit S ku S është nën tip i T.</p></blockquote><p>Ndoshta shembulli që e then këtë princip do ta lehtsoj kuptimin e ketij principi.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">Ushqim</span> <span class=\"p\">{}</span> <span class=\"kd\">class</span> <span class=\"nc\">KalkulatoriUshqimit</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">(</span><span class=\"kt\">Ushqim</span> <span class=\"nv\">$ushqim</span><span class=\"p\">):</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"nv\">$shuma</span> <span class=\"o\">=</span> <span class=\"nv\">$ushqimi</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrLlojinEMishit</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShumen</span><span class=\"p\">();</span>       <span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"nv\">$ushqimi</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShtesat</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"nv\">$shtesa</span><span class=\"p\">)</span> <span class=\"p\">{</span>           <span class=\"nv\">$shuma</span> <span class=\"o\">+=</span> <span class=\"nv\">$shtesa</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShumen</span><span class=\"p\">();</span>       <span class=\"p\">}</span>        <span class=\"k\">return</span> <span class=\"nv\">$shuma</span><span class=\"p\">;</span>   <span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">KalkulatoriUshqimitPerStudente</span> <span class=\"kd\">extends</span> <span class=\"nc\">KalkulatoriUshqimit</span><span class=\"p\">{</span>   <span class=\"k\">private</span> <span class=\"k\">const</span> <span class=\"no\">ZBRITJE_NE_PERQINDJE</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">(</span><span class=\"kt\">Ushqim</span> <span class=\"nv\">$ushqimi</span><span class=\"p\">):</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">zbritShumen</span><span class=\"p\">(</span><span class=\"k\">parent</span><span class=\"o\">::</span><span class=\"nf\">merrShumen</span><span class=\"p\">(</span><span class=\"nv\">$ushqimi</span><span class=\"p\">));</span>   <span class=\"p\">}</span>    <span class=\"k\">private</span> <span class=\"k\">function</span> <span class=\"n\">zbritShumen</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"nv\">$shuma</span><span class=\"p\">):</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"nv\">$shuma</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"nv\">$shuma</span> <span class=\"o\">*</span> <span class=\"k\">self</span><span class=\"o\">::</span><span class=\"no\">ZBRITJE_NE_PERQINDJE</span><span class=\"p\">);</span>   <span class=\"p\">}</span> <span class=\"p\">}</span></code></pre></div></div><p>Kjo pjese e kodit është pjesë e principit të dytë ku e kem zgjatur klasën <code class=\"language-plaintext highlighter-rouge\">KalkulatoriUshqimit</code>, me këtë ndryshim të metodës <code class=\"language-plaintext highlighter-rouge\">merrShumen</code> e kemi thyer rregullin e principit të tretë.Nëse i referohemi definicionit i bjen që e njëjta metodë nuk duhet të kthen vlera të ndryshme edhe pse është klasë tjeter.</p><p>Do ta rregullojme këtë klasë si në vijim.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">Ushqim</span> <span class=\"p\">{}</span> <span class=\"kd\">class</span> <span class=\"nc\">KalkulatoriUshqimit</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">(</span><span class=\"kt\">Ushqim</span> <span class=\"nv\">$ushqim</span><span class=\"p\">):</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"nv\">$shuma</span> <span class=\"o\">=</span> <span class=\"nv\">$ushqimi</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrLlojinEMishit</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShumen</span><span class=\"p\">();</span>       <span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"nv\">$ushqimi</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShtesat</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"nv\">$shtesa</span><span class=\"p\">)</span> <span class=\"p\">{</span>           <span class=\"nv\">$shuma</span> <span class=\"o\">+=</span> <span class=\"nv\">$shtesa</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShumen</span><span class=\"p\">();</span>       <span class=\"p\">}</span>        <span class=\"k\">return</span> <span class=\"nv\">$shuma</span><span class=\"p\">;</span>   <span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">KalkulatoriUshqimitPerStudente</span> <span class=\"kd\">extends</span> <span class=\"nc\">KalkulatoriUshqimit</span><span class=\"p\">{</span>   <span class=\"k\">private</span> <span class=\"k\">const</span> <span class=\"no\">ZBRITJE_NE_PERQINDJE</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumenEZbritur</span><span class=\"p\">():</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">zbritShumen</span><span class=\"p\">(</span><span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShumen</span><span class=\"p\">());</span>   <span class=\"p\">}</span>    <span class=\"k\">private</span> <span class=\"k\">function</span> <span class=\"n\">zbritShumen</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"nv\">$shuma</span><span class=\"p\">):</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"nv\">$shuma</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"nv\">$shuma</span> <span class=\"o\">*</span> <span class=\"k\">self</span><span class=\"o\">::</span><span class=\"no\">ZBRITJE_NE_PERQINDJE</span><span class=\"p\">);</span>   <span class=\"p\">}</span> <span class=\"p\">}</span></code></pre></div></div><p>Në vend që ta modifikojm metodën e klasës origjinale, do ta përdorim atë në klasën për studente dhe do të shtojmë metoda në klasën për studente.</p><h3 id=\"principi-i-katert---ndarja-e-kontratave\">Principi i katert - Ndarja e kontratave</h3><blockquote>  <p>Një klasë nuk duhet ta implementoj një metodë që nuk i nëvojitet.</p></blockquote><p>Shembull shtesat e ushqimeve, siq e kemi parë me lartë secila shtesë e ka çmimin e vet, po çka nëse kemi shtesa që nuk kushtojn?Shembull:</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">Ushqim</span> <span class=\"p\">{}</span><span class=\"kd\">interface</span> <span class=\"nc\">Shtesa</span> <span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">():</span> <span class=\"kt\">double</span><span class=\"p\">;</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">Sallate</span> <span class=\"kd\">implements</span> <span class=\"nc\">Shtesa</span> <span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">const</span> <span class=\"no\">QMIMI</span> <span class=\"o\">=</span> <span class=\"mf\">0.50</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">()</span> <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">::</span><span class=\"no\">QMIMI</span><span class=\"p\">;</span>   <span class=\"p\">}</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">BbqSos</span> <span class=\"kd\">implements</span> <span class=\"nc\">Shtesa</span> <span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">const</span> <span class=\"no\">QMIMI</span> <span class=\"o\">=</span> <span class=\"mf\">0.20</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">()</span> <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">::</span><span class=\"no\">QMIMI</span><span class=\"p\">;</span>   <span class=\"p\">}</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">Ketchup</span> <span class=\"kd\">implements</span> <span class=\"nc\">Shtesa</span> <span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">const</span> <span class=\"no\">QMIMI</span> <span class=\"o\">=</span> <span class=\"mf\">0.00</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">()</span> <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">::</span><span class=\"no\">QMIMI</span><span class=\"p\">;</span>   <span class=\"p\">}</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">Hamburger</span> <span class=\"kd\">implements</span> <span class=\"nc\">Ushqim</span> <span class=\"p\">{</span>   <span class=\"k\">private</span> <span class=\"k\">const</span> <span class=\"no\">QMIMI</span> <span class=\"o\">=</span> <span class=\"mf\">2.00</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrQmimin</span><span class=\"p\">():</span><span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">::</span><span class=\"no\">QMIMI</span><span class=\"p\">;</span>   <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Siç e shohim në shembullin më lart, shtesa  <code class=\"language-plaintext highlighter-rouge\">Ketchup</code> edhe pse është falas  duhet ta implementoj metodën <code class=\"language-plaintext highlighter-rouge\">merrShumen</code> dhe kjo nuk e respekton principin e katërt, një klasë nuk duhet ta implementoj një metodë që nuk i nevojitet.</p><p>Kështu duhet  ta ndryshojm kodin që ta respektojme principin e katërt.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">Ushqim</span> <span class=\"p\">{}</span><span class=\"kd\">interface</span> <span class=\"nc\">Shtesa</span> <span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrSasine</span><span class=\"p\">():</span> <span class=\"kt\">int</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"kd\">interface</span> <span class=\"nc\">ShtesaMePages</span> <span class=\"kd\">implements</span> <span class=\"nc\">Shtesa</span> <span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">():</span> <span class=\"kt\">double</span><span class=\"p\">;</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">Sallate</span> <span class=\"kd\">implements</span> <span class=\"nc\">ShtesaMePages</span> <span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">const</span> <span class=\"no\">QMIMI</span> <span class=\"o\">=</span> <span class=\"mf\">0.50</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">()</span> <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">::</span><span class=\"no\">QMIMI</span><span class=\"p\">;</span>   <span class=\"p\">}</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">Ketchup</span> <span class=\"kd\">implements</span> <span class=\"nc\">Shtesa</span> <span class=\"p\">{</span>   <span class=\"k\">private</span> <span class=\"kt\">int</span> <span class=\"nv\">$sasia</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrSasine</span><span class=\"p\">():</span> <span class=\"kt\">int</span>   <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">sasia</span><span class=\"p\">;</span>   <span class=\"p\">}</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">Hamburger</span> <span class=\"kd\">implements</span> <span class=\"nc\">Ushqim</span> <span class=\"p\">{</span>   <span class=\"k\">private</span> <span class=\"k\">const</span> <span class=\"no\">QMIMI</span> <span class=\"o\">=</span> <span class=\"mf\">2.00</span><span class=\"p\">;</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrQmimin</span><span class=\"p\">():</span><span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">::</span><span class=\"no\">QMIMI</span><span class=\"p\">;</span>   <span class=\"p\">}</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">KalkulatoriUshqimit</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">merrShumen</span><span class=\"p\">(</span><span class=\"kt\">Ushqim</span> <span class=\"nv\">$ushqim</span><span class=\"p\">):</span> <span class=\"kt\">double</span>   <span class=\"p\">{</span>       <span class=\"nv\">$shuma</span> <span class=\"o\">=</span> <span class=\"nv\">$ushqimi</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrLlojinEMishit</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShumen</span><span class=\"p\">();</span>       <span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"nv\">$ushqimi</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShtesat</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"nv\">$shtesa</span><span class=\"p\">)</span> <span class=\"p\">{</span>           <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$shtesa</span> <span class=\"k\">instanceof</span> <span class=\"nc\">ShtesaMePages</span><span class=\"p\">)</span> <span class=\"p\">{</span>               <span class=\"nv\">$shuma</span> <span class=\"o\">+=</span> <span class=\"nv\">$shtesa</span><span class=\"o\">-&gt;</span><span class=\"nf\">merrShumen</span><span class=\"p\">();</span>             <span class=\"p\">}</span>       <span class=\"p\">}</span>        <span class=\"k\">return</span> <span class=\"nv\">$shuma</span><span class=\"p\">;</span>   <span class=\"p\">}</span> <span class=\"p\">}</span></code></pre></div></div><p>Ky është një shembull ku ndahet kontrata për shtesat me  çmime dhe ato pa  çmime, për arsye që shtesat pa çmime nuk kan nevoj ta implementojnë metodën <code class=\"language-plaintext highlighter-rouge\">merrQmimin()</code>.</p><h3 id=\"principi-i-pestë---inversioni-i-varësisë\">Principi i pestë - Inversioni i varësisë</h3><blockquote>  <p>Një klasë që kryen një punë asnjëherë nuk duhet të varet në mjetin që e përdor por në kontratë.</p></blockquote><p>Një shembull do të ishte ta ruajm fakturen në MySQL databazë si në shembullin në vijim.E mbani mend si klasa <code class=\"language-plaintext highlighter-rouge\">RuajtjaFaktures</code> varet direkt në klasën <code class=\"language-plaintext highlighter-rouge\">Databaza</code> që është edhe implementimi mbrenda.Tani klasa <code class=\"language-plaintext highlighter-rouge\">RuajtjaFaktures</code> e then principin e parë sepse nëse e ndryshojme databazën  atëher duhet ta ndryshojm edhe klasën <code class=\"language-plaintext highlighter-rouge\">RuajtjaFaktures</code>.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Databaza</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">ruaj</span><span class=\"p\">(</span><span class=\"kt\">Faktura</span> <span class=\"nv\">$faktura</span><span class=\"p\">):</span> <span class=\"kt\">void</span>   <span class=\"p\">{</span>       <span class=\"nv\">$sql</span> <span class=\"o\">=</span> <span class=\"s2\">\"INSERT into FAKTURAT (val1, val2, val3) VALUES (1,2,3);\"</span>       <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">db</span><span class=\"o\">-&gt;</span><span class=\"nf\">executeSql</span><span class=\"p\">(</span><span class=\"nv\">$sql</span><span class=\"p\">);</span>   <span class=\"p\">}</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">RuajtjaFaktures</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__constructor</span><span class=\"p\">(</span><span class=\"kt\">Databaza</span> <span class=\"nv\">$databaza</span><span class=\"p\">){}</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">ruaj</span><span class=\"p\">(</span><span class=\"kt\">Faktura</span> <span class=\"nv\">$faktura</span><span class=\"p\">):</span> <span class=\"kt\">void</span>   <span class=\"p\">{</span>       <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">databaza</span><span class=\"o\">-&gt;</span><span class=\"nf\">ruaj</span><span class=\"p\">(</span><span class=\"nv\">$faktura</span><span class=\"p\">);</span>   <span class=\"p\">}</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">Faktura</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__constructor</span><span class=\"p\">(</span><span class=\"kt\">Ushqim</span> <span class=\"nv\">$ushqimi</span><span class=\"p\">,</span> <span class=\"kt\">double</span> <span class=\"nv\">$shuma</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><p>Një shembull  që do ta respektonte principin e pestë do të ishte si në vijim.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">Databaza</span> <span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">ruaj</span><span class=\"p\">(</span><span class=\"kt\">Faktura</span> <span class=\"nv\">$faktura</span><span class=\"p\">):</span> <span class=\"kt\">void</span><span class=\"p\">;</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">HapsiraRuajtjesSeFakturave</span> <span class=\"kd\">implements</span> <span class=\"nc\">Databaza</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">ruaj</span><span class=\"p\">(</span><span class=\"kt\">Faktura</span> <span class=\"nv\">$faktura</span><span class=\"p\">):</span> <span class=\"kt\">void</span>   <span class=\"p\">{</span>       <span class=\"nv\">$sql</span> <span class=\"o\">=</span> <span class=\"s2\">\"INSERT into FAKTURAT (val1, val2, val3) VALUES (1,2,3);\"</span>       <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">db</span><span class=\"o\">-&gt;</span><span class=\"nf\">executeSql</span><span class=\"p\">(</span><span class=\"nv\">$sql</span><span class=\"p\">);</span>   <span class=\"p\">}</span><span class=\"p\">}</span> <span class=\"kd\">class</span> <span class=\"nc\">RuajtjaFaktures</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__constructor</span><span class=\"p\">(</span><span class=\"kt\">Databaza</span> <span class=\"nv\">$databaza</span><span class=\"p\">){}</span>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">ruaj</span><span class=\"p\">(</span><span class=\"kt\">Faktura</span> <span class=\"nv\">$faktura</span><span class=\"p\">):</span> <span class=\"kt\">void</span>   <span class=\"p\">{</span>       <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"n\">databaza</span><span class=\"o\">-&gt;</span><span class=\"nf\">ruaj</span><span class=\"p\">(</span><span class=\"nv\">$faktura</span><span class=\"p\">);</span>   <span class=\"p\">}</span><span class=\"p\">}</span>   <span class=\"kd\">class</span> <span class=\"nc\">Faktura</span><span class=\"p\">{</span>   <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">__constructor</span><span class=\"p\">(</span><span class=\"kt\">Ushqim</span> <span class=\"nv\">$ushqimi</span><span class=\"p\">,</span> <span class=\"kt\">double</span> <span class=\"nv\">$shuma</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><p>Ne këtë shembull e shohim që tani kemi një kontratë <code class=\"language-plaintext highlighter-rouge\">Databaza</code> dhe një klasë ku gjendet implementimi i ruajtjes së fakturave <code class=\"language-plaintext highlighter-rouge\">HapsiraRuajtjesSeFakturave</code>, tash nëse vendosim ta ndryshojm databazën në MongoDB, NoSQL ose çkado qoft nuk kemi nevoj ta ndryshojm klasën <code class=\"language-plaintext highlighter-rouge\">RuajtjaFaktures</code> sepse ajo varet në kontrat e jo në implementim.</p><h3 id=\"finalizimi-dhe-hapat-e-tjerë\">Finalizimi dhe hapat e tjerë</h3><p>Këto janë pra pesë principet në OO të cilat shikohen në secilën intervistë se sa mirë i ke kuptuar dhe a din si ti përdorni ato.Hapat e radhës janë: Që të provosh ti aplikosh këto principe duhet startuar një projekt të vogël ose edhe në punën ku punon.Kur e shikon një kod në fillim të merr kohe ti shikosh të gjitha principet, por pas ca kohe bëhet më e leht.Përserite këtë proces disa here.</p><p>Nëse keni ndonjë koment, kritike ose   vetëm don të kemi një bised rreth OO atëher me kontakto në rrjetet sociale.<a href=\"https://github.com/diarselimi\">Github</a></p>",
            "url": "https://programerat.github.io/2021/11/solid-principet-dhe-si-ti-aplikoni-ne-kod",
            
            
            
            "tags": ["SOLID,","OO,","PHP,","PROGRAMERAT"],
            
            "date_published": "2021-11-17T09:15:20+01:00",
            "date_modified": "2021-11-17T09:15:20+01:00",
            
                "author": "diarselimi"
            
        }
    
    ]
}